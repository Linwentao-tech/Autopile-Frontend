This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-29T16:02:30.567Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
app/_lib/DatabaseFetcher.tsx
app/_lib/dbConnect.tsx
app/_lib/features/cart/cartSlice.ts
app/_lib/hooks.ts
app/_lib/ProductFilter.tsx
app/_lib/store.ts
app/_lib/stripe.ts
app/about-us/page.tsx
app/api/auth/[...nextauth]/route.ts
app/api/create-checkout-session/route.ts
app/api/getBlurData/route.ts
app/api/orders/route.ts
app/api/products/best-sellers/route.ts
app/api/products/route.ts
app/api/webhooks/stripe/route.ts
app/auth.ts
app/cart/page.tsx
app/category/accessories/page.tsx
app/category/all-products/page.tsx
app/category/best-seller/page.tsx
app/category/engine/page.tsx
app/category/layout.tsx
app/category/vehicle-body-parts/page.tsx
app/category/wheels-and-rims/page.tsx
app/category/wholesale/page.tsx
app/components/Button.tsx
app/components/CartPage.tsx
app/components/CartWarming.tsx
app/components/DashboardNav.tsx
app/components/DynamicProductPageBlur.tsx
app/components/DynamicProductsBlur.tsx
app/components/DynamicReviewsPictureBlur.tsx
app/components/DynamicTopSellers.tsx
app/components/DynamicUserIconBlur.tsx
app/components/Footer/Footer.tsx
app/components/Footer/FooterSection.tsx
app/components/Footer/PaymentIcon.tsx
app/components/Footer/PaymentMethodsSection.tsx
app/components/Header/AboutUsHeader.tsx
app/components/Header/Advertisement.tsx
app/components/Header/Cart.tsx
app/components/Header/Header.tsx
app/components/Header/Info.tsx
app/components/Header/LoginCart.tsx
app/components/Header/Navigation.tsx
app/components/Header/NavigationSection.tsx
app/components/Header/PremiumHeader.tsx
app/components/Header/SearchForm.tsx
app/components/Header/SearchLoginCartHeader.tsx
app/components/Header/SvgLogo.tsx
app/components/Homepage/Brand.tsx
app/components/Homepage/Brands.tsx
app/components/Homepage/Category.tsx
app/components/Homepage/ClubJoin.tsx
app/components/Homepage/LearnMore.tsx
app/components/Homepage/ProductReview.tsx
app/components/Homepage/ReviewCard.tsx
app/components/Homepage/Table.tsx
app/components/Homepage/TopSeller.tsx
app/components/Homepage/TopSellerContainer.tsx
app/components/InterfaceType.tsx
app/components/MiniCart.tsx
app/components/PremiumPage/Form.tsx
app/components/ProductCard.tsx
app/components/ProductCardContainer.tsx
app/components/ProductSection.tsx
app/components/ProductSectionContainer.tsx
app/components/ProductSideBar.tsx
app/components/ProductSubmitComponent.tsx
app/components/ReviewPage/ReviewSection.tsx
app/components/ScrollTop.tsx
app/components/SideBarExpand.tsx
app/dashboard/layout.tsx
app/dashboard/orders/page.tsx
app/dashboard/overview/page.tsx
app/dashboard/page.tsx
app/dashboard/profile/page.tsx
app/globals.css
app/layout.tsx
app/middleware.ts
app/page.tsx
app/premium-area/page.tsx
app/product-page/[productname]/page.tsx
app/reviews/page.tsx
app/StoreProvider.tsx
app/success/page.tsx
next.config.mjs
package.json
postcss.config.mjs
product.product.json
products.json
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/_lib/DatabaseFetcher.tsx
================
import clientPromise from "@/app/_lib/dbConnect";
import { Product, Review } from "../components/InterfaceType";
import { type MongoClient } from "mongodb";
export async function ReviewsFetcher(): Promise<Review[]> {
  try {
    const client: MongoClient = await clientPromise;
    const db = client.db("product");
    const reviews: Review[] = await db
      .collection<Review>("reviews")
      .find({})
      .toArray();
    return reviews;
  } catch (error) {
    console.error("Failed to fetch reviews:", error);
    throw error;
  }
}

export async function ProductFetcher(): Promise<Product[]> {
  try {
    const client: MongoClient = await clientPromise;
    const db = client.db("product");
    const products: Product[] = await db
      .collection<Product>("product")
      .find({})
      .toArray();
    return products;
  } catch (error) {
    console.error("Failed to fetch products:", error);
    throw error;
  }
}

================
File: app/_lib/dbConnect.tsx
================
import { MongoClient } from "mongodb";

if (!process.env.MONGODB_URI) {
  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {
  const globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}
export default clientPromise;

================
File: app/_lib/features/cart/cartSlice.ts
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface CartItem {
  id: string;
  name: string;
  image: string;
  price: string;
  quantity: number;
}

interface CartState {
  items: CartItem[];
  warning: string | null;
}

const initialState: CartState = {
  items: [],
  warning: null,
};

const MAX_QUANTITY = 10;

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addItem: (state, action: PayloadAction<CartItem>) => {
      const existingItem = state.items.find(
        (item) => item.id === action.payload.id
      );
      if (existingItem) {
        const newQuantity = existingItem.quantity + action.payload.quantity;
        if (newQuantity > MAX_QUANTITY) {
          existingItem.quantity = MAX_QUANTITY;
          state.warning = `Maximum quantity (${MAX_QUANTITY}) reached for ${existingItem.name}. Quantity set to ${MAX_QUANTITY}.`;
        } else {
          existingItem.quantity = newQuantity;
          state.warning = null;
        }
      } else {
        if (action.payload.quantity > MAX_QUANTITY) {
          state.items.push({
            ...action.payload,
            quantity: MAX_QUANTITY,
          });
          state.warning = `Maximum quantity (${MAX_QUANTITY}) reached for ${action.payload.name}. Quantity set to ${MAX_QUANTITY}.`;
        } else {
          state.items.push(action.payload);
          state.warning = null;
        }
      }
    },
    removeItem: (state, action: PayloadAction<string>) => {
      state.items = state.items.filter((item) => item.id !== action.payload);
      state.warning = null;
    },
    updateQuantity: (
      state,
      action: PayloadAction<{ id: string; quantity: number }>
    ) => {
      const item = state.items.find((item) => item.id === action.payload.id);
      if (item) {
        if (action.payload.quantity > MAX_QUANTITY) {
          item.quantity = MAX_QUANTITY;
          state.warning = `Maximum quantity (${MAX_QUANTITY}) reached for ${item.name}. Quantity set to ${MAX_QUANTITY}.`;
        } else {
          item.quantity = Math.max(1, action.payload.quantity);
          state.warning = null;
        }
      }
    },
    clearCart: (state) => {
      state.items = [];
      state.warning = null;
    },
    clearWarning: (state) => {
      state.warning = null;
    },
  },
});

export const { addItem, removeItem, updateQuantity, clearCart, clearWarning } =
  cartSlice.actions;
export default cartSlice.reducer;

================
File: app/_lib/hooks.ts
================
import { useDispatch, useSelector, useStore } from "react-redux";
import type { AppDispatch, AppStore, RootState } from "./store";

// Use throughout your app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch = useDispatch.withTypes<AppDispatch>();
export const useAppSelector = useSelector.withTypes<RootState>();
export const useAppStore = useStore.withTypes<AppStore>();

================
File: app/_lib/ProductFilter.tsx
================
import { PageProps, Product } from "../components/InterfaceType";

function ProductFilter({
  searchParams,
  products,
}: PageProps & { products: Product[] }) {
  const minPrice: number | undefined =
    Number(searchParams?.minPrice) || undefined;
  const maxPrice: number | undefined =
    Number(searchParams?.maxPrice) || undefined;

  return products.filter((product) => {
    const price = product.comparePrice || product.price;
    if (minPrice && maxPrice) {
      return price >= minPrice && price <= maxPrice;
    } else if (minPrice) {
      return price >= minPrice;
    } else if (maxPrice) {
      return price <= maxPrice;
    } else {
      return true;
    }
  });
}

export default ProductFilter;

================
File: app/_lib/store.ts
================
import { configureStore } from "@reduxjs/toolkit";
import cartReducer from "./features/cart/cartSlice";

export const makeStore = () => {
  return configureStore({
    reducer: {
      cart: cartReducer,
    },
  });
};

// Infer the type of makeStore
export type AppStore = ReturnType<typeof makeStore>;
// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<AppStore["getState"]>;
export type AppDispatch = AppStore["dispatch"];

================
File: app/_lib/stripe.ts
================
import { Stripe, loadStripe } from "@stripe/stripe-js";

let stripePromise: Promise<Stripe | null>;
const getStripe = () => {
  if (!stripePromise) {
    stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);
  }
  return stripePromise;
};

export default getStripe;

================
File: app/about-us/page.tsx
================
import background from "@/public/about-car.jpg";
import Image from "next/image";
export const metadata = {
  title: "About us",
  description: "We Understand Cars",
};
function page() {
  return (
    <section className="px-12 pt-16">
      <h1 className="text-4xl">We Understand Cars</h1>
      <p className="w-1/5 mt-5 text-lg ">
        We love cars and know them inside out. From design and performance to
        the latest trends, we&apos;re here to share our expertise. Whether
        you&apos;re an enthusiast or just curious, join us as we explore
        everything that makes cars special.
      </p>
      <section className="grid-flow-col grid mt-48">
        <article className="border p-32">
          <h2 className="text-3xl font-bold mb-6">Dependability</h2>
          <p className="text-xl">
            We prioritize reliability above all else, ensuring that you can
            count on us whenever you need support. Our commitment to
            dependability means delivering consistent quality and trusted
            service every time.
          </p>
        </article>
        <article className="border p-32">
          <h2 className="text-3xl font-bold mb-6">Affordability</h2>
          <p className="text-xl">
            Quality doesn&apos;t have to come at a high price. We offer
            competitive pricing and value-driven options, making sure you get
            the best without breaking the bank.
          </p>
        </article>
        <article className="border p-32">
          <h2 className="text-3xl font-bold mb-6">Availability</h2>
          <p className="text-xl">
            We&apos;re always here when you need us. With flexible scheduling
            and round-the-clock support, we&apos;re ready to assist whenever you
            require our services.
          </p>
        </article>
      </section>
      <section className="relative mt-20 ">
        <Image
          src={background}
          alt="car light background image"
          fill
          className="absolute inset-0 z-0 object-cover"
          placeholder="blur"
        />
        <div className="relative z-10 p-10 text-white">
          <h1 className="text-3xl w-[400px] leading-normal mb-10">
            A One-Stop Shop for Automotive Enthusiasts
          </h1>
          <p className="w-1/5 text-lg leading-relaxed mb-24">
            Welcome to the ultimate destination for car enthusiasts! From the
            latest model reviews to expert maintenance tips, we&apos;ve got
            everything you need to fuel your passion. Explore, learn, and
            connect with a community that shares your love for cars.
          </p>

          <ul className="space-y-10 w-96 text-md">
            <li className="flex items-center gap-12">
              <svg
                preserveAspectRatio="none"
                data-bbox="0 0 200 200"
                xmlns="http://www.w3.org/2000/svg"
                width="15"
                height="15"
                viewBox="0 0 200 200"
                role="presentation"
                aria-hidden="true"
              >
                <g>
                  <path
                    d="M200 100c0 55.228-44.772 100-100 100S0 155.228 0 100 44.772 0 100 0s100 44.772 100 100z"
                    fill="white"
                  />
                </g>
              </svg>
              <p>Free shipping on all orders over $75</p>
            </li>
            <li className="grid grid-flow-col items-center gap-12">
              <svg
                preserveAspectRatio="none"
                data-bbox="0 0 200 200"
                xmlns="http://www.w3.org/2000/svg"
                width="15"
                height="15"
                viewBox="0 0 200 200"
                role="presentation"
                aria-hidden="true"
              >
                <g>
                  <path
                    d="M200 100c0 55.228-44.772 100-100 100S0 155.228 0 100 44.772 0 100 0s100 44.772 100 100z"
                    fill="white"
                  />
                </g>
              </svg>
              <p>
                Tested & proven before any product lands on our shelves,
                it&apos;s thoroughly tested
              </p>
            </li>
            <li className="flex items-center gap-12">
              <svg
                preserveAspectRatio="none"
                data-bbox="0 0 200 200"
                xmlns="http://www.w3.org/2000/svg"
                width="15"
                height="15"
                viewBox="0 0 200 200"
                role="presentation"
                aria-hidden="true"
              >
                <g>
                  <path
                    d="M200 100c0 55.228-44.772 100-100 100S0 155.228 0 100 44.772 0 100 0s100 44.772 100 100z"
                    fill="white"
                  />
                </g>
              </svg>
              <p>Customer service available 24/7</p>
            </li>
          </ul>
        </div>
      </section>
      <hr className="opacity-30 mt-20" />
    </section>
  );
}

export default page;

================
File: app/api/auth/[...nextauth]/route.ts
================
import { handlers } from "@/app/auth";
export const { GET, POST } = handlers;

================
File: app/api/create-checkout-session/route.ts
================
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { auth } from "@/app/auth";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-09-30.acacia",
});

interface CartItem {
  id: string;
  name: string;
  price: string;
  quantity: number;
  image: string;
}

interface StripeError extends Error {
  type?: string;
}

export async function POST(req: Request) {
  try {
    const { items, deliveryFee }: { items: CartItem[]; deliveryFee: number } =
      await req.json();

    if (!process.env.STRIPE_SECRET_KEY) {
      throw new Error(
        "STRIPE_SECRET_KEY is not set in the environment variables"
      );
    }

    const session = await auth();

    const lineItems: Stripe.Checkout.SessionCreateParams.LineItem[] = items.map(
      (item: CartItem) => ({
        price_data: {
          currency: "aud",
          product_data: {
            name: item.name,
            images: [item.image],
          },
          unit_amount: Math.round(
            parseFloat(item.price.replace("$", "")) * 100
          ),
        },
        quantity: item.quantity,
      })
    );

    const params: Stripe.Checkout.SessionCreateParams = {
      payment_method_types: ["card"],
      line_items: lineItems,
      mode: "payment",
      success_url: `${req.headers.get("origin")}/success`,
      cancel_url: `${req.headers.get("origin")}/cart`,
      shipping_address_collection: {
        allowed_countries: ["AU"],
      },
      shipping_options: [
        {
          shipping_rate_data: {
            type: "fixed_amount",
            fixed_amount: {
              amount: Math.round(deliveryFee * 100),
              currency: "aud",
            },
            display_name: "Standard Shipping",
            delivery_estimate: {
              minimum: {
                unit: "business_day",
                value: 5,
              },
              maximum: {
                unit: "business_day",
                value: 7,
              },
            },
          },
        },
      ],
    };

    // Add customer_email to params if session exists
    if (session?.user?.email) {
      params.customer_email = session.user.email;
    }

    const checkoutSession = await stripe.checkout.sessions.create(params);

    return NextResponse.json({ id: checkoutSession.id });
  } catch (err: unknown) {
    console.error("Error creating checkout session:", err);
    if (err instanceof Error) {
      const stripeError = err as StripeError;
      if (stripeError.type === "StripeAuthenticationError") {
        return NextResponse.json(
          {
            error:
              "Authentication with Stripe failed. Please check your API key.",
          },
          { status: 401 }
        );
      }
    }
    return NextResponse.json(
      { error: "An error occurred while creating the checkout session." },
      { status: 500 }
    );
  }
}

================
File: app/api/getBlurData/route.ts
================
import { getPlaiceholder } from "plaiceholder";
import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
  const url = request.nextUrl.searchParams.get("url");

  if (!url) {
    return NextResponse.json({ error: "URL is required" }, { status: 400 });
  }

  try {
    const buffer = await fetch(url).then(async (res) => {
      if (!res.ok) throw new Error(`Failed to fetch image: ${res.statusText}`);
      return Buffer.from(await res.arrayBuffer());
    });

    const { base64 } = await getPlaiceholder(buffer);

    return NextResponse.json({ blurDataURL: base64 });
  } catch (error) {
    console.error("Error generating blur data:", error);
    return NextResponse.json(
      { error: "Failed to generate blur data" },
      { status: 500 }
    );
  }
}

================
File: app/api/orders/route.ts
================
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-09-30.acacia",
});

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const email = searchParams.get("email");

  if (!email) {
    return NextResponse.json({ error: "Email is required" }, { status: 400 });
  }

  try {
    // Search for checkout sessions with the given email
    const sessions = await stripe.checkout.sessions.list({
      customer_details: { email },
      limit: 100, // Adjust this limit as needed
    });

    // Retrieve detailed information for each session
    const orderPromises = sessions.data.map(async (session) => {
      const expandedSession = await stripe.checkout.sessions.retrieve(
        session.id,
        {
          expand: ["line_items", "customer"],
        }
      );

      return {
        id: expandedSession.id,
        amount_total: expandedSession.amount_total,
        currency: expandedSession.currency,
        customer_email: expandedSession.customer_details?.email,
        customer_name: expandedSession.customer_details?.name,
        shipping_address: expandedSession.shipping_details?.address,
        items: expandedSession.line_items?.data.map((item) => ({
          id: item.id,
          description: item.description,
          quantity: item.quantity,
          amount_total: item.amount_total,
        })),
        payment_status: expandedSession.payment_status,
        created: new Date(expandedSession.created * 1000).toISOString(),
      };
    });

    const orders = await Promise.all(orderPromises);

    return NextResponse.json({ orders });
  } catch (error) {
    console.error("Error retrieving orders:", error);
    return NextResponse.json(
      { error: "Error retrieving orders" },
      { status: 500 }
    );
  }
}

================
File: app/api/products/best-sellers/route.ts
================
import { NextResponse } from "next/server";
import clientPromise from "@/app/_lib/dbConnect";
import { Product } from "@/app/components/InterfaceType";

export async function GET() {
  try {
    const client = await clientPromise;
    const db = client.db("product");

    const bestSellerProducts = await db
      .collection<Product>("product")
      .find({ ribbon: "Best Seller" })
      .toArray();

    if (bestSellerProducts.length === 0) {
      return NextResponse.json(
        { message: "No best seller products found" },
        { status: 404 }
      );
    }

    return NextResponse.json(bestSellerProducts);
  } catch (e) {
    console.error(e);
    return NextResponse.json(
      { error: "Failed to fetch best seller products" },
      { status: 500 }
    );
  }
}

================
File: app/api/products/route.ts
================
import { NextResponse } from "next/server";

import { Product } from "@/app/components/InterfaceType";
import clientPromise from "@/app/_lib/dbConnect";

export async function GET() {
  try {
    const client = await clientPromise;
    const db = client.db("product");

    const products = await db.collection<Product>("product").find({}).toArray();
    console.log(NextResponse.json(products));

    return NextResponse.json(products);
  } catch (e) {
    console.error(e);
    return NextResponse.json(
      { error: "Failed to fetch products" },
      { status: 500 }
    );
  }
}

================
File: app/api/webhooks/stripe/route.ts
================
// app/api/webhooks/stripe/route.ts
import { headers } from "next/headers";
import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";
import { Resend } from "resend";

// Define types for logging data
type LogData = {
  [key: string]: string | number | boolean | null | undefined;
};

// Define types for order details
interface OrderDetails {
  orderId: string;
  items: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
  total: number;
}

// Initialize Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-09-30.acacia",
});

// Configuration for your Vercel deployment
const DOMAIN = "e-commerce-plum-seven-35.vercel.app";

// Helper function for consistent logging with typed data
function logWebhookEvent(message: string, data?: LogData) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] Webhook: ${message}`);
  if (data) {
    console.log("Data:", JSON.stringify(data, null, 2));
  }
}

async function sendOrderConfirmationEmail(
  email: string,
  orderDetails: OrderDetails
) {
  try {
    logWebhookEvent("Starting email send attempt", {
      recipient: email,
      orderId: orderDetails.orderId,
    });

    // Check for API key
    const resendApiKey = process.env.RESEND_API_KEY;
    if (!resendApiKey) {
      logWebhookEvent("❌ Missing Resend API key");
      return;
    }

    const resend = new Resend(resendApiKey);

    const emailResponse = await resend.emails.send({
      from: `E-Commerce Store <customer@autopile.store>`,
      to: email,
      subject: `Order Confirmation #${orderDetails.orderId}`,
      html: `
        <html>
          <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <h1>Thank you for your order!</h1>
            <p>Your order #${orderDetails.orderId} has been confirmed.</p>
            
            <h2>Order Summary:</h2>
            <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
              <thead>
                <tr style="background-color: #f8f9fa;">
                  <th style="padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6;">Item</th>
                  <th style="padding: 12px; text-align: right; border-bottom: 2px solid #dee2e6;">Quantity</th>
                  <th style="padding: 12px; text-align: right; border-bottom: 2px solid #dee2e6;">Price</th>
                </tr>
              </thead>
              <tbody>
                ${orderDetails.items
                  .map(
                    (item) => `
                  <tr>
                    <td style="padding: 12px; border-bottom: 1px solid #dee2e6;">${
                      item.name
                    }</td>
                    <td style="padding: 12px; text-align: right; border-bottom: 1px solid #dee2e6;">${
                      item.quantity
                    }</td>
                    <td style="padding: 12px; text-align: right; border-bottom: 1px solid #dee2e6;">$${(
                      item.price / 100
                    ).toFixed(2)}</td>
                  </tr>
                `
                  )
                  .join("")}
                <tr>
                  <td colspan="2" style="padding: 12px; text-align: right; font-weight: bold;">Total:</td>
                  <td style="padding: 12px; text-align: right; font-weight: bold;">$${(
                    orderDetails.total / 100
                  ).toFixed(2)}</td>
                </tr>
              </tbody>
            </table>
            
            <p>We'll send you another email when your order ships.</p>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
              <p>If you have any questions, please contact our support team.</p>
              <p>Thank you for shopping with us!</p>
              <p><small>This order was placed on ${DOMAIN}</small></p>
            </div>
          </body>
        </html>
      `,
    });

    logWebhookEvent("✅ Email sent successfully", {
      recipient: email,
      orderId: orderDetails.orderId,
    });

    return emailResponse;
  } catch (error) {
    logWebhookEvent("❌ Error sending email", {
      error: error instanceof Error ? error.message : "Unknown error",
      recipient: email,
      orderId: orderDetails.orderId,
    });
  }
}

export async function POST(request: NextRequest) {
  try {
    logWebhookEvent("Received webhook request");

    const body = await request.text();
    const headersList = headers();
    const signature = headersList.get("stripe-signature");

    // Log headers for debugging
    logWebhookEvent("Webhook headers received", {
      hasSignature: Boolean(signature).toString(),
      contentType: headersList.get("content-type") ?? "none",
    });

    // Verify required environment variables
    if (!process.env.STRIPE_WEBHOOK_SECRET) {
      logWebhookEvent("❌ Missing Stripe webhook secret");
      return NextResponse.json(
        { error: "Server configuration error" },
        { status: 500 }
      );
    }

    if (!signature) {
      logWebhookEvent("❌ Missing Stripe signature");
      return NextResponse.json(
        { error: "Missing stripe signature" },
        { status: 400 }
      );
    }

    // Verify the webhook signature
    const event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET
    );

    logWebhookEvent("✅ Webhook signature verified", {
      eventType: event.type,
      eventId: event.id,
    });

    // Handle the event
    if (event.type === "checkout.session.completed") {
      const session = event.data.object as Stripe.Checkout.Session;

      logWebhookEvent("Processing checkout session", {
        sessionId: session.id,
        customerEmail: session.customer_details?.email ?? "no email",
      });

      // Retrieve the session with line items
      const expandedSession = await stripe.checkout.sessions.retrieve(
        session.id,
        {
          expand: ["line_items"],
        }
      );

      // Format order details
      const orderDetails: OrderDetails = {
        orderId: session.id,
        items:
          expandedSession.line_items?.data.map((item) => ({
            name: item.description ?? "Unnamed Item",
            quantity: item.quantity ?? 1,
            price: item.amount_total ?? 0,
          })) || [],
        total: session.amount_total ?? 0,
      };

      logWebhookEvent("Order details formatted", {
        orderId: orderDetails.orderId,
        itemCount: orderDetails.items.length,
        total: orderDetails.total,
      });

      // Send confirmation email
      if (session.customer_details?.email) {
        // Don't await email sending to prevent webhook timeout
        sendOrderConfirmationEmail(
          session.customer_details.email,
          orderDetails
        ).catch((error) => {
          logWebhookEvent("❌ Error in email send promise", {
            error: error instanceof Error ? error.message : "Unknown error",
          });
        });
      } else {
        logWebhookEvent("⚠️ No customer email found in session");
      }
    }

    logWebhookEvent("✅ Webhook processed successfully");

    // Return a response to acknowledge receipt of the event
    return NextResponse.json({ received: true }, { status: 200 });
  } catch (err) {
    logWebhookEvent("❌ Webhook processing failed", {
      error: err instanceof Error ? err.message : "Unknown error",
    });

    return NextResponse.json(
      { error: "Webhook handler failed" },
      { status: 400 }
    );
  }
}

================
File: app/auth.ts
================
import NextAuth from "next-auth";
import Google from "next-auth/providers/google";

export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [Google],
});

================
File: app/cart/page.tsx
================
import CartPage from "../components/CartPage";

export const metadata = {
  title: "Cart",
  description: "Cart Page",
};

function page() {
  return <CartPage />;
}

export default page;

================
File: app/category/accessories/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";

export const metadata = {
  title: "Accessories",
  description: "Accessories Page",
};

async function page({ searchParams }: PageProps) {
  const products: Product[] = (await ProductFetcher()).filter(
    (product) => product.productType === "accessories"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">Accessories</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/all-products/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";

export const metadata = {
  title: "All Products",
  description: "Page of all of the products",
};
async function page({ searchParams }: PageProps) {
  const products: Product[] = await ProductFetcher();
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">All Products</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/best-seller/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";
export const metadata = {
  title: "Best Seller",
  description: "Page of best seller",
};
async function page({ searchParams }: PageProps) {
  const products: Product[] = (await ProductFetcher()).filter(
    (product) => product.ribbon === "Best Seller"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">Best Seller</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/engine/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";
export const metadata = {
  title: "Engine",
  description: "Engine Page",
};
async function page({ searchParams }: PageProps) {
  const products: Product[] = (await ProductFetcher()).filter(
    (product) => product.productType === "engine"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">Engine</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/layout.tsx
================
import { ChildrenProps } from "@/app/components/InterfaceType";
import ProductSideBar from "@/app/components/ProductSideBar";
import { Suspense } from "react";

function layout({ children }: ChildrenProps) {
  return (
    <div className="mx-12 flex justify-start gap-7">
      <Suspense>
        <ProductSideBar />
      </Suspense>
      <main>{children}</main>
    </div>
  );
}

export default layout;

================
File: app/category/vehicle-body-parts/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";
export const metadata = {
  title: "Vehicle Body Parts",
  description: "Vehicle Body Parts Page",
};
async function page({ searchParams }: PageProps) {
  const products: Product[] = (await ProductFetcher()).filter(
    (product) => product.productType === "Vehicle Body Parts"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">Vehicle Body Parts</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/wheels-and-rims/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";
export const metadata = {
  title: "Wheels & Rims",
  description: "Wheels & Rims Page",
};
async function page({ searchParams }: PageProps) {
  const products: Product[] = (await ProductFetcher()).filter(
    (product) => product.productType === "Wheels & Rims"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">Wheels & Rims</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/wholesale/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";
export const metadata = {
  title: "Wholesale",
  description: "Wholesale Page",
};
async function Page({ searchParams }: PageProps) {
  const products: Product[] = await ProductFetcher();
  const wholesaleProducts: Product[] = products.filter(
    (product) => product.ribbon === "Sale"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: wholesaleProducts,
  });

  return (
    <div className="bg-red">
      <h1 className="text-6xl mb-10">Wholesale</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default Page;

================
File: app/components/Button.tsx
================
"use client";
import {
  type ButtonType,
  type ChildrenProps,
} from "@/app/components/InterfaceType";
import Link from "next/link";
import { useAppDispatch, useAppSelector } from "../_lib/hooks";
import { addItem, clearCart } from "../_lib/features/cart/cartSlice";
import { useCallback, useEffect, useState } from "react";
import getStripe from "@/app/_lib/stripe";
interface ButtonProps extends ChildrenProps {
  type: ButtonType;
  productId?: string;
  productName?: string;
  productImage?: string;
  productPrice?: string;
  quantity?: number;
}

function Button({
  children,
  type,
  productId,
  productName,
  productImage,
  productPrice,
  quantity = 1,
}: ButtonProps) {
  const items = useAppSelector((state) => state.cart.items);
  const dispatch = useAppDispatch();
  const [addToCartClicked, setAddToCartClicked] = useState(false);
  const handleAddToCart = useCallback(() => {
    if (productId && productName && productImage) {
      dispatch(
        addItem({
          id: productId,
          name: productName,
          image: productImage,
          price: productPrice || "",
          quantity: quantity,
        })
      );
      setAddToCartClicked(true);
    }
  }, [dispatch, productId, productName, productImage, productPrice, quantity]);

  useEffect(() => {
    if (addToCartClicked) {
      setAddToCartClicked(false);
    }
  }, [items, addToCartClicked]);
  const [checkoutError, setCheckoutError] = useState<string | null>(null);

  const handleCheckout = async () => {
    setCheckoutError(null);
    const stripe = await getStripe();

    try {
      const response = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: [
            {
              id: productId,
              name: productName,
              price: productPrice,
              quantity: 1,
              image: productImage,
            },
          ],
          deliveryFee: 10,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "An error occurred during checkout");
      }

      const data = await response.json();
      const result = await stripe?.redirectToCheckout({ sessionId: data.id });

      if (result?.error) {
        throw new Error(result.error.message);
      }
    } catch (error: unknown) {
      console.error("Checkout error:", error);
      if (error instanceof Error) {
        setCheckoutError(error.message);
        console.log(checkoutError);
      } else {
        setCheckoutError("An unexpected error occurred");
        console.log(checkoutError);
      }
    }
  };
  if (typeof type === "object" && type.type === "orange_button")
    if (type.subtype === "shop_now")
      return (
        <div>
          <Link href="/category/all-products">
            <button
              className={`bg-orange-700 px-7 py-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
            >
              {children}
            </button>
          </Link>
        </div>
      );
    else if (type.subtype === "learn_about")
      return (
        <div>
          <Link href="/about-us">
            <button
              className={`bg-orange-700 px-7 py-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
            >
              {children}
            </button>
          </Link>
        </div>
      );
    else if (type.subtype === "premium_area")
      return (
        <div>
          <Link href="/premium-area" scroll={false}>
            <button
              className={`bg-orange-700 px-7 py-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
            >
              {children}
            </button>
          </Link>
        </div>
      );
    else if (type.subtype === "default")
      return (
        <div>
          <button
            className={`bg-orange-700 px-7 py-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
          >
            {children}
          </button>
        </div>
      );
  if (type == "orange_submit_button")
    return (
      <div>
        <button
          className={`bg-orange-700 px-12 py-2 ml-56 mt-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
        >
          {children}
        </button>
      </div>
    );
  if (type == "transparent-button")
    return (
      <div>
        <Link href="/category/all-products">
          <button
            className="bg-transparent text-white px-8 py-3  rounded-full  border-2 border-white  hover:bg-orange-700 hover:text-black hover:border-orange-700 
        transition-all duration-500"
          >
            {children}
          </button>
        </Link>
      </div>
    );
  if (type === "Add_to_cart_homepage") {
    return (
      <div>
        <button
          className="bg-transparent text-white px-14 py-3 rounded-full border-2 border-white
                       hover:bg-white hover:text-black hover:border-white
                       transition-all duration-300 ease-in-out
                       active:bg-white active:text-black active:scale-95
                       active:duration-150 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"
          onClick={handleAddToCart}
        >
          {children}
        </button>
      </div>
    );
  }
  if (type === "Add_to_cart_productPage") {
    return (
      <div className="w-full">
        <button
          className="bg-transparent text-white rounded-full border-2 border-white
                       hover:text-opacity-60 
                       transition-all duration-300 ease-in-out
                       mt-5 w-full py-2 px-4
                       focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50
                       active:bg-white active:text-black active:scale-95
                       active:duration-150"
          onClick={handleAddToCart}
        >
          {children}
        </button>
      </div>
    );
  }
  if (type === "Buy_now")
    return (
      <div className="w-full ">
        <button
          onClick={handleCheckout}
          className="bg-orange-700 px-4 py-2 text-black rounded-full  transition-all   border-2 border-transparent duration-500 w-full hover:opacity-60"
        >
          {children}
        </button>
      </div>
    );
  if (type === "clear_cart")
    return (
      <div className="w-32">
        <button
          onClick={() => dispatch(clearCart())}
          className="bg-orange-700 px-4 py-3 text-white rounded-full  transition-all   border-2 border-transparent duration-500 w-full hover:opacity-60"
        >
          {children}
        </button>
      </div>
    );
}

export default Button;

================
File: app/components/CartPage.tsx
================
"use client";

import { useState } from "react";
import { useAppSelector, useAppDispatch } from "../_lib/hooks";
import { updateQuantity, removeItem } from "../_lib/features/cart/cartSlice";
import Image from "next/image";
import Link from "next/link";
import CartWarning from "./CartWarming";
import Button from "./Button";
import getStripe from "@/app/_lib/stripe";

interface CartItem {
  id: string;
  name: string;
  price: string;
  quantity: number;
  image: string;
}

const DELIVERY_FEE = 10; // $10 delivery fee

export default function CartPage() {
  const cartItems = useAppSelector((state) => state.cart.items) as CartItem[];
  const dispatch = useAppDispatch();
  const [checkoutError, setCheckoutError] = useState<string | null>(null);

  const handleQuantityChange = (id: string, newQuantity: number) => {
    if (newQuantity > 0) {
      dispatch(updateQuantity({ id, quantity: newQuantity }));
    } else {
      dispatch(removeItem(id));
    }
  };

  const parsePrice = (price: string): number => {
    return parseFloat(price.replace("$", ""));
  };

  const subtotal = cartItems.reduce((total, item) => {
    return total + parsePrice(item.price) * item.quantity;
  }, 0);

  const total = subtotal;
  const totalWithDelivery = total + DELIVERY_FEE;

  const handleCheckout = async () => {
    setCheckoutError(null);
    const stripe = await getStripe();

    try {
      const response = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: cartItems,
          deliveryFee: DELIVERY_FEE,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "An error occurred during checkout");
      }

      const data = await response.json();
      const result = await stripe?.redirectToCheckout({ sessionId: data.id });

      if (result?.error) {
        throw new Error(result.error.message);
      }
    } catch (error: unknown) {
      console.error("Checkout error:", error);
      if (error instanceof Error) {
        setCheckoutError(error.message);
      } else {
        setCheckoutError("An unexpected error occurred");
      }
    }
  };

  if (cartItems.length === 0) {
    return (
      <div className="container mx-auto px-4 py-8 text-white">
        <h1 className="text-4xl font-extrabold mb-4">My cart</h1>
        <p className="text-lg ">
          Your cart is empty.{" "}
          <Link
            href="/category/all-products"
            className="text-orange-500 hover:underline"
          >
            Continue shopping
          </Link>
        </p>
      </div>
    );
  }

  return (
    <>
      <CartWarning />
      <div className="container mx-auto px-4 py-8 text-white">
        {checkoutError && (
          <div className="bg-red-500 text-white p-4 mb-4 rounded">
            Error: {checkoutError}
          </div>
        )}
        <div className="flex flex-col md:flex-row gap-8">
          <div className="md:w-2/3">
            <h1 className="text-2xl font-bold mb-6">My cart</h1>
            <div className="space-y-6">
              {cartItems.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center space-x-4 border-b border-gray-700 py-4"
                >
                  <Image
                    src={item.image}
                    alt={item.name}
                    width={100}
                    height={100}
                    className="object-cover"
                  />
                  <div className="flex-grow">
                    <h2 className="text-lg font-semibold">{item.name}</h2>
                    <p className="text-gray-400">{item.price}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() =>
                        handleQuantityChange(item.id, item.quantity - 1)
                      }
                      className="bg-gray-800 text-white px-2 py-1"
                    >
                      -
                    </button>
                    <span className="px-2">{item.quantity}</span>
                    <button
                      onClick={() =>
                        handleQuantityChange(item.id, item.quantity + 1)
                      }
                      className="bg-gray-800 text-white px-2 py-1"
                    >
                      +
                    </button>
                  </div>
                  <p className="text-lg font-semibold">
                    ${(parsePrice(item.price) * item.quantity).toFixed(2)}
                  </p>
                  <button
                    onClick={() => dispatch(removeItem(item.id))}
                    className="text-gray-400 hover:text-red-500"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                      />
                    </svg>
                  </button>
                </div>
              ))}
              <Button type="clear_cart">Clear Cart</Button>
            </div>
          </div>
          <div className="md:w-1/3">
            <div className="bg-gray-900 p-6 rounded-lg">
              <h2 className="text-xl font-bold mb-4">Order summary</h2>
              <div className="space-y-2 mb-4">
                <div className="flex justify-between">
                  <span>Subtotal</span>
                  <span>${subtotal.toFixed(2)}</span>
                </div>

                <div className="flex justify-between">
                  <span>Delivery Fee</span>
                  <span>${DELIVERY_FEE.toFixed(2)}</span>
                </div>
              </div>
              <div className="border-t border-gray-700 pt-4 mb-6">
                <div className="flex justify-between font-bold">
                  <span>Total</span>
                  <span>${totalWithDelivery.toFixed(2)}</span>
                </div>
              </div>
              <button
                onClick={handleCheckout}
                className="w-full bg-red-600 text-white py-3 rounded-full font-semibold hover:bg-red-700 transition-colors"
              >
                Proceed to Checkout
              </button>
              <div className="flex justify-center items-center mt-4 text-gray-400">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                    clipRule="evenodd"
                  />
                </svg>
                Secure Checkout
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

================
File: app/components/CartWarming.tsx
================
import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { clearWarning } from "@/app/_lib/features/cart/cartSlice";
import { RootState } from "../_lib/store";

const CartWarning = () => {
  const warning = useSelector((state: RootState) => state.cart.warning);
  const dispatch = useDispatch();
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (warning) {
      setIsVisible(true);
      const timer = setTimeout(() => {
        setIsVisible(false);
      }, 4500);

      const clearTimer = setTimeout(() => {
        dispatch(clearWarning());
      }, 5000);

      return () => {
        clearTimeout(timer);
        clearTimeout(clearTimer);
      };
    }
  }, [warning, dispatch]);

  if (!warning) return null;

  return (
    <div
      className={`absolute top-4 left-1/2 transform -translate-x-1/2 z-50 transition-all duration-500 ease-in-out ${
        isVisible ? "opacity-100 translate-y-0" : "opacity-0 -translate-y-full"
      } scroll-smooth overscroll-contain`}
    >
      <div
        className="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded shadow-lg max-w-md"
        role="alert"
      >
        <div className="flex">
          <div className="py-1">
            <svg
              className="fill-current h-6 w-6 text-orange-500 mr-4"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
            >
              <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z" />
            </svg>
          </div>
          <div>
            <p className="font-bold">Warning</p>
            <p className="text-sm">{warning}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CartWarning;

================
File: app/components/DashboardNav.tsx
================
import Link from "next/link";

function DashboardNav() {
  return (
    <div>
      <nav className="inline-flex flex-col space-y-10 text-2xl">
        <Link
          href="/dashboard/overview"
          className="hover:opacity-65 border border-spacing-20 border-gray-300 p-4 rounded-lg"
        >
          Overview
        </Link>
        <Link
          href="/dashboard/orders"
          className="hover:opacity-65 border border-spacing-20 border-gray-300 p-4 rounded-lg"
        >
          Orders
        </Link>
        <Link
          href="/dashboard/profile"
          className="hover:opacity-65 border border-spacing-20 border-gray-300 p-4 rounded-lg"
        >
          Profile
        </Link>
      </nav>
    </div>
  );
}

export default DashboardNav;

================
File: app/components/DynamicProductPageBlur.tsx
================
import Image from "next/image";
import { getPlaiceholder } from "plaiceholder";

async function DynamicProductPageBlur({
  src,
  name,
}: {
  src: string;
  name: string;
}) {
  const buffer = await fetch(src).then(async (res) => {
    return Buffer.from(await res.arrayBuffer());
  });

  const { base64 } = await getPlaiceholder(buffer);

  return (
    <div className="flex justify-center items-start">
      <Image
        src={src}
        alt={`${name} image`}
        width={600}
        height={900}
        quality={100}
        className="w-full h-auto px-16"
        placeholder="blur"
        blurDataURL={base64}
      />
    </div>
  );
}

export default DynamicProductPageBlur;

================
File: app/components/DynamicProductsBlur.tsx
================
import Image from "next/image";
import { getPlaiceholder } from "plaiceholder";
async function DynamicProductsBlur({
  src,
  name,
}: {
  src: string;
  name: string;
}) {
  const buffer = await fetch(src).then(async (res) => {
    return Buffer.from(await res.arrayBuffer());
  });

  const { base64 } = await getPlaiceholder(buffer);

  return (
    <div className="overflow-hidden w-full ">
      <Image
        src={src}
        alt={`${name} image`}
        width={600}
        height={600}
        className="object-cover transition-transform duration-300 group-hover:scale-110"
        placeholder="blur"
        blurDataURL={base64}
      />
    </div>
  );
}

export default DynamicProductsBlur;

================
File: app/components/DynamicReviewsPictureBlur.tsx
================
"use client";

import { useState, useEffect } from "react";
import Image from "next/image";

function DynamicReviewsPictureBlur({
  src,
  title,
}: {
  src: string;
  title: string;
}) {
  const [blurDataURL, setBlurDataURL] = useState<string | null>(null);

  useEffect(() => {
    const fetchBlurData = async () => {
      try {
        const response = await fetch(
          `/api/getBlurData?url=${encodeURIComponent(src)}`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch blur data");
        }
        const data = await response.json();
        setBlurDataURL(data.blurDataURL);
      } catch (error) {
        console.error("Error fetching blur data:", error);
      }
    };

    fetchBlurData();
  }, [src]);

  return (
    <div className="relative w-full aspect-[4/3]">
      <Image
        src={src}
        alt={title}
        fill
        className="object-cover"
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
        placeholder={blurDataURL ? "blur" : "empty"}
        blurDataURL={blurDataURL || undefined}
      />
    </div>
  );
}

export default DynamicReviewsPictureBlur;

================
File: app/components/DynamicTopSellers.tsx
================
"use client";
import Image from "next/image";
import { useEffect, useState } from "react";

function DynamicTopSellers({ src, alt }: { src: string; alt: string }) {
  const [blurDataURL, setBlurDataURL] = useState<string | null>(null);

  useEffect(() => {
    const fetchBlurData = async () => {
      try {
        const response = await fetch(
          `/api/getBlurData?url=${encodeURIComponent(src)}`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch blur data");
        }
        const data = await response.json();
        setBlurDataURL(data.blurDataURL);
      } catch (error) {
        console.error("Error fetching blur data:", error);
      }
    };

    fetchBlurData();
  }, [src]);

  return (
    <Image
      src={src}
      alt={alt}
      fill
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 20vw"
      className=" object-cover"
      placeholder={blurDataURL ? "blur" : "empty"}
      blurDataURL={blurDataURL || undefined}
    />
  );
}

export default DynamicTopSellers;

================
File: app/components/DynamicUserIconBlur.tsx
================
import Image from "next/image";
import { getPlaiceholder } from "plaiceholder";
import { auth } from "../auth";

async function DynamicUserIconBlur() {
  const session = await auth();
  let base64 = "";

  if (session?.user?.image) {
    try {
      const buffer = await fetch(session.user.image).then(async (res) => {
        if (!res.ok) throw new Error("Failed to fetch image");
        return Buffer.from(await res.arrayBuffer());
      });

      const result = await getPlaiceholder(buffer);
      base64 = result.base64;
    } catch (error) {
      console.error("Error generating blur data:", error);
    }
  }

  return (
    <div>
      {session && session.user && (
        <div className="flex items-center gap-6">
          <p className="mt-0.5 font-bold text-lg">
            Welcome back, {session.user.name}
          </p>
          {session.user.image && (
            <Image
              src={session.user.image}
              alt="User icon"
              width={50}
              height={50}
              className="rounded-full"
              quality={100}
              blurDataURL={base64 || undefined}
              placeholder={base64 ? "blur" : "empty"}
            />
          )}
        </div>
      )}
    </div>
  );
}

export default DynamicUserIconBlur;

================
File: app/components/Footer/Footer.tsx
================
import SvgLogo from "@/app/components/Header/SvgLogo";
import FooterSection from "@/app/components/Footer/FooterSection";

import PaymentMethodsSection from "@/app/components/Footer/PaymentMethodsSection";

function Footer() {
  return (
    <section className="mx-12 mb-14 mt-32">
      <div className="grid grid-flow-col mb-16 gap-72 ">
        <SvgLogo width={60} height={60} type="logo" />
        <FooterSection />
      </div>
      <hr className="border border-gray-600 mt-10" />
      <PaymentMethodsSection />
    </section>
  );
}

export default Footer;

================
File: app/components/Footer/FooterSection.tsx
================
import Link from "next/link";

const footerLinks = [
  {
    title: "Shop",
    links: [
      { href: "/category/all-products", text: "Shop Parts" },
      { href: "/category/wheels-and-rims", text: "Wheels & Rims" },
      { href: "/category/engine", text: "Engine" },
      { href: "/category/vehicle-body-parts", text: "Vehicle Body Parts" },
      { href: "/category/accessories", text: "Accessories" },
      { href: "/category/wholesale", text: "Wholesale" },
    ],
  },
  {
    title: "The Company",
    links: [
      { href: "/about-us", text: "About Us" },
      { href: "/reviews", text: "Reviews" },
      { href: "/premium-area", text: "Premium Area" },
    ],
  },
];

function ContactSection() {
  return (
    <section className="space-y-2 text-sm flex-1">
      <h2 className="mb-7 text-xl">Contact Us</h2>
      <Link href="mailto:info@autopile.com" className="opacity-45">
        info@autopile.com
      </Link>
      <address className="opacity-45 leading-relaxed">
        <Link
          href="https://www.google.com/maps/place/Autopile/@-41.0323272,145.8129355,19z/data=!3m1!4b1!4m6!3m5!1s0xaa7bec33fd6fdbbf:0x2d2c61e710085a10!8m2!3d-41.0323282!4d145.8135792!16s%2Fg%2F11vq2r3256?entry=ttu&g_ep=EgoyMDI0MDkyOS4wIKXMDSoASAFQAw%3D%3D"
          target="_blank"
          rel="noopener noreferrer"
          className="no-underline text-inherit"
        >
          10 Fairlands Dr,
          <br />
          Somerset
          <br />
          TAS 7322
        </Link>
      </address>
    </section>
  );
}

function FooterSection() {
  return (
    <>
      {footerLinks.map((section) => {
        return (
          <section key={section.title} className="space-y-2 text-sm flex-1">
            <p className="mb-7 text-xl">{section.title}</p>
            {section.links.map((link) => {
              return (
                <div key={link.href} className="mb-2">
                  <Link href={link.href} className="cursor-pointer opacity-45">
                    {link.text}
                  </Link>
                </div>
              );
            })}
          </section>
        );
      })}
      <ContactSection />
    </>
  );
}

export default FooterSection;

================
File: app/components/Footer/PaymentIcon.tsx
================
import Image from "next/image";
import { type PaymentIconProp } from "@/app/components/InterfaceType";

function PaymentIcon({ src }: PaymentIconProp) {
  return <Image src={src} alt={`${src} icon`} quality={70} />;
}

export default PaymentIcon;

================
File: app/components/Footer/PaymentMethodsSection.tsx
================
import MasterCard from "@/public/MasterCard.png";
import UnionPay from "@/public/UnionPay.png";
import Diners from "@/public/Diners.png";
import AmericanExpress from "@/public/AmericanExpress.png";
import Discover from "@/public/Discover.png";
import Visa from "@/public/Visa.png";
import PaymentIcon from "./PaymentIcon";

function PaymentMethodsSection() {
  return (
    <>
      <div className="flex justify-center my-6">
        <h3 className="font-bold">Payment Methods</h3>
      </div>
      <div className="flex items-center justify-center gap-5">
        <PaymentIcon src={MasterCard} />
        <PaymentIcon src={UnionPay} />
        <PaymentIcon src={Diners} />
        <PaymentIcon src={AmericanExpress} />
        <PaymentIcon src={Discover} />
        <PaymentIcon src={Visa} />
      </div>
      <hr className="border border-gray-600 mt-10" />
    </>
  );
}

export default PaymentMethodsSection;

================
File: app/components/Header/AboutUsHeader.tsx
================
function AboutUsHeader() {
  return (
    <section className="px-12 pb-44">
      <h1 className="text-6xl">About Us</h1>
      <p className="text-2xl mt-6">
        People with a passion for auto parts,
        <br />
        service & relationships
      </p>
    </section>
  );
}

export default AboutUsHeader;

================
File: app/components/Header/Advertisement.tsx
================
import Button from "../Button";
import SvgLogo from "./SvgLogo";

function Advertisement() {
  return (
    <div className="mt-10 pb-10 m-12">
      <p className="text-4xl">Shop Our Premium Auto Parts</p>
      <p className="text-7xl font-bold mt-8 mb-10">
        Build Your Dream Car Today.
        <br />
        Now 15% Off On All Items.
      </p>
      <Button type={{ type: "orange_button", subtype: "shop_now" }}>
        Shop Now
      </Button>
      <div className="flex items-center gap-9">
        <SvgLogo
          width={50}
          height={50}
          type="iconA"
          text={["Free Shipping", "On all orders over 75$"]}
        />
        <SvgLogo
          width={50}
          height={50}
          type="iconB"
          text={["Tested & Proven", "Highest quality testing standards"]}
        />
        <SvgLogo
          width={50}
          height={50}
          type="iconC"
          text={["Customer Service", "Available 24/7"]}
        />
      </div>
    </div>
  );
}

export default Advertisement;

================
File: app/components/Header/Cart.tsx
================
"use client";
import { useAppSelector } from "@/app/_lib/hooks";
import Link from "next/link";

function Cart() {
  const items = useAppSelector((state) => state.cart.items);
  return (
    <Link href="/cart">
      <div className="flex gap-1">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1.5}
          stroke="currentColor"
          className="size-6"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"
          />
        </svg>
        {items.length !== 0 && items.length}
      </div>
    </Link>
  );
}

export default Cart;

================
File: app/components/Header/Header.tsx
================
"use client";
import { usePathname } from "next/navigation";
import { type ReactNode } from "react";
import { type ChildrenProps } from "../InterfaceType";
import PremiumPageBackGround from "@/public/PremiumAreaBackground.jpg";
import Image from "next/image";
import background from "@/public/background.png";
import aboutUsbackground from "@/public/about-us-header.jpg";

interface HeaderProps extends ChildrenProps {
  advertisement: ReactNode;
  premiumArea: ReactNode;
  aboutUs: ReactNode;
}

function Header({
  children,
  advertisement,
  premiumArea,
  aboutUs,
}: HeaderProps) {
  const pathname: string = usePathname();
  const isHomePage: boolean = pathname === "/";
  const isPremiumPage: boolean = pathname === "/premium-area";
  const isPartsPage: boolean = pathname === "/category/all-products";
  const isReviewsPage: boolean = pathname === "/reviews";
  const isWholesalePage: boolean = pathname === "/category/wholesale";
  const isAboutUsPage: boolean = pathname === "/about-us";
  const isAccessoriesPage: boolean = pathname === "/category/accessories";
  const isBestSellersPage: boolean = pathname === "/category/best-seller";
  const isEnginePage: boolean = pathname === "/category/engine";
  const isVehiclePage: boolean = pathname === "/category/vehicle-body-parts";
  const isWheelsPage: boolean = pathname === "/category/wheels-and-rims";
  const isCartPage: boolean = pathname === "/cart";
  const isDashboardPage: boolean = pathname === "/dashboard";
  return (
    <div className="relative">
      {isHomePage && (
        <video
          className="w-full h-full object-cover absolute z-0"
          autoPlay
          muted
          loop
          playsInline
          preload="auto"
        >
          <source src="/video.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      )}
      {isPremiumPage && (
        <Image
          src={PremiumPageBackGround}
          alt="background"
          className="w-full h-full object-cover absolute z-0"
          placeholder="blur"
          fill
        />
      )}
      {isAboutUsPage && (
        <Image
          src={aboutUsbackground}
          alt="background"
          className="w-full h-full object-cover object-[center_21%]"
          placeholder="blur"
          fill
          quality={100}
        />
      )}
      {(isReviewsPage ||
        isWholesalePage ||
        isPartsPage ||
        isAccessoriesPage ||
        isBestSellersPage ||
        isEnginePage ||
        isVehiclePage ||
        isWheelsPage ||
        isCartPage ||
        isDashboardPage) && (
        <Image
          src={background}
          alt="background"
          className="w-full h-full absolute z-0 filter brightness-200"
          placeholder="blur"
          fill
        />
      )}

      <div className="relative z-10">
        <div className="p-12">{children}</div>
        {isHomePage && advertisement}
        {isPremiumPage && premiumArea}
        {isAboutUsPage && aboutUs}
      </div>
    </div>
  );
}

export default Header;

================
File: app/components/Header/Info.tsx
================
import { Suspense } from "react";
import SearchLoginCartHeader from "./SearchLoginCartHeader";

function Info() {
  return (
    <div className="flex items-center justify-between border-b border-white pb-9">
      <p>Free shipping on orders over $75. Call us 123-456-789</p>
      <Suspense fallback={<div>Loading...</div>}>
        <SearchLoginCartHeader />
      </Suspense>
    </div>
  );
}

export default Info;

================
File: app/components/Header/LoginCart.tsx
================
import { signIn, signOut } from "@/app/auth";
import { auth } from "@/app/auth";

async function LoginCart() {
  const session = await auth();
  async function handleLogin() {
    "use server";
    await signIn("google", { redirectTo: "/dashboard" });
  }
  async function handleLogout() {
    "use server";
    await signOut();
  }
  return (
    <form action={session ? handleLogout : handleLogin}>
      <button type="submit">
        <div className="flex items-center justify-center space-x-2 mt-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="size-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
            />
          </svg>
          <p>{session ? "Log out" : "Log in"}</p>
        </div>
      </button>
    </form>
  );
}

export default LoginCart;

================
File: app/components/Header/Navigation.tsx
================
import { auth } from "@/app/auth";
import Link from "next/link";

async function Navigation() {
  const session = await auth();
  return (
    <nav>
      <ul className="flex space-x-4 ">
        <li>
          <Link
            href="/category/all-products"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Shop Parts
          </Link>
        </li>
        <li>
          <Link
            href="/category/wholesale"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Wholesale
          </Link>
        </li>
        <li>
          <Link
            href="/reviews"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Reviews
          </Link>
        </li>
        <li>
          <Link
            href="/premium-area"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Premium Area
          </Link>
        </li>
        {session && (
          <li>
            <Link
              href="/dashboard"
              className="hover:text-orange-500 transition-colors duration-500 "
            >
              Dashboard
            </Link>
          </li>
        )}
      </ul>
    </nav>
  );
}

export default Navigation;

================
File: app/components/Header/NavigationSection.tsx
================
import Navigation from "./Navigation";
import SvgLogo from "./SvgLogo";

function NavigationSection() {
  return (
    <div className="flex justify-between items-center w-full pt-3 ">
      <SvgLogo width={60} height={60} type="logo" />
      <Navigation />
    </div>
  );
}

export default NavigationSection;

================
File: app/components/Header/PremiumHeader.tsx
================
function PremiumHeader() {
  return (
    <div className="px-12 pt-16 py-48">
      <h1 className="text-6xl mb-6">
        Join Our <br />
        Premium Club
      </h1>
      <h2 className="text-2xl ">For people who love cars</h2>
    </div>
  );
}

export default PremiumHeader;

================
File: app/components/Header/SearchForm.tsx
================
function SearchForm() {
  return (
    <form className="flex items-center border border-white/50 rounded-md p-2 transition-colors  duration-200 ease-in-out hover:border-white/80 focus-within:border-white group">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="size-5 mr-2 text-white/50 transition-colors duration-200 ease-in-out group-hover:text-white/80 group-focus-within:text-white"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
        />
      </svg>
      <input
        type="search"
        placeholder="Search..."
        id="search"
        name="search"
        className="bg-transparent w-full focus:outline-none text-white placeholder-white/50"
      />
    </form>
  );
}

export default SearchForm;

================
File: app/components/Header/SearchLoginCartHeader.tsx
================
import Cart from "./Cart";
import LoginCart from "./LoginCart";
import SearchForm from "./SearchForm";

import DynamicUserIconBlur from "../DynamicUserIconBlur";

async function SearchLoginCartHeader() {
  return (
    <div className="flex items-center justify-between gap-7">
      <SearchForm />
      <Cart />
      <LoginCart />
      <DynamicUserIconBlur />
    </div>
  );
}

export default SearchLoginCartHeader;

================
File: app/components/Header/SvgLogo.tsx
================
"use client";
import Link from "next/link";
import React, { Fragment } from "react";
import { type SvgLogoProps } from "../InterfaceType";
import { usePathname, useRouter } from "next/navigation";

type IconType = "iconA" | "iconB" | "iconC";

interface LogoProps extends SvgLogoProps {
  type: "logo";
}

interface IconProps extends SvgLogoProps {
  type: IconType;
  text: string[];
}

type SvgLogoType = LogoProps | IconProps;
function SvgLogo(props: SvgLogoType) {
  const { width, height, type } = props;
  const pathname: string = usePathname();
  const router = useRouter();
  const isHomePage: boolean = pathname === "/";
  if (type == "logo") {
    const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
      e.preventDefault();

      if (isHomePage) {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      } else {
        router.push("/");
      }
    };
    return (
      <Link
        href="/"
        className="flex items-start space-x-2 text-xl justify-center "
        onClick={handleClick}
      >
        <svg
          preserveAspectRatio="xMidYMid meet"
          viewBox="10 55 180 90"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          role="img"
          aria-label="Logo"
          className="fill-current text-white"
        >
          <g>
            <path d="M55 122.5c0 12.426-10.074 22.5-22.5 22.5S10 134.926 10 122.5 20.074 100 32.5 100 55 110.074 55 122.5z" />
            <path d="M167.5 100c-21.039 0-22.501-17.017-22.525-21.453.016-.347.025-.696.025-1.047 0-12.426-10.074-22.5-22.5-22.5h-45C65.074 55 55 65.074 55 77.5S65.074 100 77.5 100h45c20.596 0 22.58 14.832 22.597 20.411A22.889 22.889 0 0 0 145 122.5c0 12.426 10.074 22.5 22.5 22.5s22.5-10.074 22.5-22.5-10.074-22.5-22.5-22.5z" />
          </g>
        </svg>
        <p className="font-semibold">autopile</p>
      </Link>
    );
  }
  if (type == "iconA") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          viewBox="39.995 10 120.005 180.006"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          role="img"
          aria-label="Abstract shape icon"
        >
          <g>
            <path d="M130 70c-28.052 0-30.002-22.69-30.033-28.604.021-.463.033-.928.033-1.396 0-16.569-13.431-30-30-30-16.569 0-30 13.431-30 30 0 16.569 13.431 30 30 30 27.462 0 30.107 19.776 30.13 27.215-.085.917-.13 1.846-.13 2.785 0 16.568 13.431 30 30 30 16.569 0 30-13.431 30-30 0-16.569-13.431-30-30-30z" />
            <path d="M81.483 132.282c15.308 6.34 22.577 23.889 16.236 39.197-6.34 15.307-23.889 22.576-39.197 16.236-15.307-6.341-22.576-23.89-16.236-39.197 6.341-15.308 23.89-22.577 39.197-16.236z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
  if (type == "iconB") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          data-bbox="10 10 180 180"
          viewBox="10 10 180 180"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          data-type="shape"
          role="presentation"
          aria-hidden="true"
        >
          <g>
            <path d="M130 40c0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30 0-16.569 13.431-30 30-30 16.569 0 30 13.431 30 30z" />
            <path d="M130 160c0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30 0-16.569 13.431-30 30-30 16.569 0 30 13.431 30 30z" />
            <path d="M160 70a29.883 29.883 0 0 0-20.073 7.709v-.002c-42.182 30.214-79.856 0-79.856 0A29.883 29.883 0 0 0 40 70c-16.568 0-30 13.432-30 30s13.432 30 30 30a29.873 29.873 0 0 0 19.306-7.044c41.307-26.483 80.621-.664 80.621-.664v-.001A29.883 29.883 0 0 0 160 130c16.569 0 30-13.431 30-30s-13.431-30-30-30z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
  if (type == "iconC") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          data-bbox="10 9.983 180.001 180.034"
          viewBox="10 9.983 180.001 180.034"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          data-type="shape"
          role="presentation"
          aria-hidden="true"
        >
          <g>
            <path d="M189.318 145.617a37.186 37.186 0 0 0-2.362-7.633 37.17 37.17 0 0 0-7.874-11.607c-24.649-24.649-6.425-46.299-1.256-51.523.425-.388.845-.786 1.256-1.198 14.558-14.558 14.558-38.162 0-52.721-14.559-14.558-38.162-14.558-52.721 0-14.558 14.559-14.558 38.162 0 52.721 24.13 24.13 9.078 43.83 2.561 50.388-.182.151-.358.313-.539.468-.24.207-.482.41-.717.624a36.2 36.2 0 0 0-1.305 1.241c-24.649 24.649-46.299 6.425-51.523 1.256a37.158 37.158 0 0 0-1.198-1.256c-14.558-14.558-38.162-14.558-52.721 0-14.558 14.558-14.558 38.162 0 52.721 14.558 14.558 38.162 14.558 52.721 0 24.13-24.13 43.83-9.078 50.388-2.561.15.181.311.356.465.535.208.241.412.484.627.721.398.438.807.87 1.229 1.293l.011.012a37.275 37.275 0 0 0 9.024 6.654 37.094 37.094 0 0 0 3.724 1.692c1.227.481 2.475.891 3.737 1.237a37.32 37.32 0 0 0 4.164.892c.191.029.381.06.572.086 1.69.234 3.393.355 5.096.357l.043.001a37.432 37.432 0 0 0 12.333-2.09 37.008 37.008 0 0 0 6.61-3.071 37.704 37.704 0 0 0 9.977-8.589 37.058 37.058 0 0 0 4.095-6.193 37.174 37.174 0 0 0 4.094-13.763 37.414 37.414 0 0 0 0-7.146 37.32 37.32 0 0 0-.511-3.548z" />
            <path d="M84.462 47.214c0 20.562-16.669 37.231-37.231 37.231S10 67.776 10 47.214 26.669 9.983 47.231 9.983s37.231 16.669 37.231 37.231z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
}

export default SvgLogo;

================
File: app/components/Homepage/Brand.tsx
================
import { type ReactNode } from "react";

type BrandProps = {
  children: ReactNode;
};

function Brand({ children }: BrandProps) {
  return (
    <section className="border border-gray-600 relative w-[700px] h-[260px]">
      {children}
    </section>
  );
}

export default Brand;

================
File: app/components/Homepage/Brands.tsx
================
import Image from "next/image";
import Brand from "./Brand";
import Drivilux from "@/public/Drivilux.png";
import Drivery from "@/public/Drivery.png";
import Autopartse from "@/public/Autopartse.png";
import Wheelbu from "@/public/Wheelbu.png";
import Motorks from "@/public/Motorks.png";
function Brands() {
  return (
    <section className="mx-12">
      <h1 className="text-4xl mb-10">Brands We Trust</h1>
      <section className="flex items-center justify-center mb-14">
        <Brand>
          <Image
            src={Drivilux}
            alt="Drivilux brand"
            fill
            placeholder="blur"
            className="p-20 object-contain"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </Brand>
        <Brand>
          <Image
            src={Autopartse}
            alt="Autopartse brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Wheelbu}
            alt="Wheelbu brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Motorks}
            alt="Motorks brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Drivery}
            alt="Drivery brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
      </section>
    </section>
  );
}

export default Brands;

================
File: app/components/Homepage/Category.tsx
================
import Button from "../Button";
import image1 from "../../../public/image1.webp";
import image2 from "../../../public/image2.webp";
import image3 from "../../../public/image3.webp";
import image4 from "../../../public/image4.webp";
import Image from "next/image";

function Category() {
  return (
    <div className="mx-4 sm:mx-8 md:mx-12">
      <header className="flex flex-col sm:flex-row items-center justify-between mb-6 ">
        <h1 className="text-2xl sm:text-3xl mb-4 sm:mb-0">Shop by Category</h1>
        <Button type="transparent-button">Shop</Button>
      </header>
      <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 ">
        {[image1, image2, image3, image4].map((image, index) => (
          <div
            key={index}
            className="relative w-full aspect-[4/4] overflow-hidden"
          >
            <Image
              src={image}
              alt={`Category ${index + 1}`}
              placeholder="blur"
              fill
              sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw"
              className="object-cover transition-transform duration-500 ease-in-out hover:scale-110"
            />
          </div>
        ))}
      </section>
    </div>
  );
}

export default Category;

================
File: app/components/Homepage/ClubJoin.tsx
================
import Image from "next/image";
import background from "../../../public/carbackground2.jpg";
import Button from "../Button";

function ClubJoin() {
  return (
    <section className="relative">
      <Image
        className="object-cover"
        src={background}
        alt="car background image"
        quality={100}
        placeholder="blur"
        fill
        sizes="100vw"
        priority
      />
      <div className="relative z-10 p-6 text-white">
        <div className="relative ml-5 ">
          <h1 className="text-5xl  mb-10 font-smibold mt-40 ">
            Join Our <br />
            Premium Club
          </h1>
          <hr className="my-4 border-t border-white  w-[700px] " />
          <p className="text-2xl mb-10 mt-10">
            Our premium membership will give you exclusive access to <br /> our
            early-bird sales, new arrivals and other special offers.{" "}
          </p>
          <div className="mb-40">
            <Button type={{ type: "orange_button", subtype: "premium_area" }}>
              Join Now
            </Button>
          </div>
        </div>
      </div>
    </section>
  );
}

export default ClubJoin;

================
File: app/components/Homepage/LearnMore.tsx
================
import Image from "next/image";
import background from "../../../public/carbackground.jpg";
import Button from "../Button";
import Table from "./Table";

function LearnMore() {
  return (
    <section className="relative">
      <Image
        className="object-cover"
        src={background}
        alt="car background image"
        placeholder="blur"
        fill
        sizes="100vw"
        priority
      />
      <div className="relative z-10 p-6 text-white">
        <div className="relative ml-5 ">
          <h1 className="text-5xl mb-24 font-smibold pt-40 ">
            The One-Stop Shop for <br />
            Automotive Enthusiasts
          </h1>
          <Table />
          <div className="mb-24 ">
            <Button type={{ type: "orange_button", subtype: "learn_about" }}>
              Learn More
            </Button>
          </div>
        </div>
      </div>
    </section>
  );
}

export default LearnMore;

================
File: app/components/Homepage/ProductReview.tsx
================
import ReviewCard from "./ReviewCard";
import { Review } from "../InterfaceType";
import { ReviewsFetcher } from "@/app/_lib/DatabaseFetcher";

async function ProductReview() {
  const reviews: Review[] = await ReviewsFetcher();

  return (
    <section className="mx-12 my-16">
      <h1 className="text-4xl">Product Reviews</h1>
      <div className="flex gap-10 items-center mt-9">
        {reviews.map((review) => (
          <ReviewCard
            id={review.id}
            key={review.id}
            img={review.imageUrl}
            title={review.title}
            subtitle={review.subtitle}
            type="homepage"
          />
        ))}
      </div>
    </section>
  );
}

export default ProductReview;

================
File: app/components/Homepage/ReviewCard.tsx
================
"use client";
import { useState } from "react";
import Image from "next/image";
import { ReviewCardProps } from "../InterfaceType";
import DynamicReviewsPictureBlur from "../DynamicReviewsPictureBlur";

function ReviewCard({ id, img, title, subtitle, type }: ReviewCardProps) {
  const [isLiked, setIsLiked] = useState(false);
  if (type == "homepage") {
    if (id !== 4) {
      return (
        <section className="border border-gray-800 max-w-sm">
          <DynamicReviewsPictureBlur src={img} title={title} />
          <section className="px-6">
            <h1 className="text-lg font-bold my-6 break-words">{title}</h1>
            <h2 className="my-6 break-words text-sm">
              {subtitle.split(" ").slice(0, 10).join(" ")}
              {subtitle.split(" ").length > 10 ? "..." : ""}
            </h2>
            <hr className="border-gray-800" />
            <div className="py-4 flex items-center justify-between">
              <section className="flex items-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M8.625 9.75a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375m-13.5 3.01c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.184-4.183a1.14 1.14 0 0 1 .778-.332 48.294 48.294 0 0 0 5.83-.498c1.585-.233 2.708-1.626 2.708-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                  />
                </svg>
                0
              </section>
              <section
                className="flex items-center gap-1 cursor-pointer"
                onClick={() => setIsLiked(!isLiked)}
              >
                {isLiked ? "1" : "0"}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className={`size-6 transition-all duration-300 ease-in-out ${
                    isLiked
                      ? "fill-red-600 text-red-600 scale-125"
                      : "fill-none text-current scale-100"
                  }`}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                  />
                </svg>
              </section>
            </div>
          </section>
        </section>
      );
    }
  } else {
    return (
      <section className="border border-gray-800 max-w-sm">
        <div className="relative w-full aspect-[4/3]">
          <Image
            src={img}
            alt={title}
            fill
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>
        <section className="px-6">
          <h1 className="text-lg font-bold my-6 break-words">{title}</h1>
          <h2 className="my-6 break-words text-sm">
            {subtitle.split(" ").slice(0, 10).join(" ")}
            {subtitle.split(" ").length > 10 ? "..." : ""}
          </h2>
          <hr className="border-gray-800" />
          <div className="py-4 flex items-center justify-between">
            <section className="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="size-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M8.625 9.75a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375m-13.5 3.01c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.184-4.183a1.14 1.14 0 0 1 .778-.332 48.294 48.294 0 0 0 5.83-.498c1.585-.233 2.708-1.626 2.708-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                />
              </svg>
              0
            </section>
            <section
              className="flex items-center gap-1 cursor-pointer"
              onClick={() => setIsLiked(!isLiked)}
            >
              {isLiked ? "1" : "0"}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className={`size-6 transition-all duration-300 ease-in-out ${
                  isLiked
                    ? "fill-red-600 text-red-600 scale-125"
                    : "fill-none text-current scale-100"
                }`}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                />
              </svg>
            </section>
          </div>
        </section>
      </section>
    );
  }
}

export default ReviewCard;

================
File: app/components/Homepage/Table.tsx
================
function Table() {
  return (
    <table className="table-auto border border-white border-collapse text-sm mb-24">
      <tbody>
        <tr>
          <td className="border-white border py-9 pl-9 pr-44">
            Free in-store or <br /> curbside pickup
          </td>
          <td className="border-white border py-9 pl-9 pr-44">
            Personalized care including <br />
            battery testing and installation
          </td>
        </tr>
        <tr>
          <td className="border-white border py-9 pl-9 pr-44">
            Certified <br />
            technicians only
          </td>
          <td className="border-white border py-9 pl-9 pr-44">
            Get points for every purchase.
            <br />
            Redeem points for rewards
          </td>
        </tr>
      </tbody>
    </table>
  );
}

export default Table;

================
File: app/components/Homepage/TopSeller.tsx
================
"use client";
import React, { useState } from "react";
import { Product } from "../InterfaceType";
import Button from "../Button";
import DynamicTopSellers from "../DynamicTopSellers";

function TopSeller({ products }: { products: Product[] }) {
  const [currentPage, setCurrentPage] = useState(0);
  const productsPerPage = 5;

  const nextPage = () => {
    setCurrentPage(
      (prev) => (prev + 1) % Math.ceil(products.length / productsPerPage)
    );
  };

  const prevPage = () => {
    setCurrentPage(
      (prev) =>
        (prev - 1 + Math.ceil(products.length / productsPerPage)) %
        Math.ceil(products.length / productsPerPage)
    );
  };

  return (
    <section className="w-full mt-20 mb-44">
      <h1 className="text-4xl mb-6 px-4 mx-8">Top Sellers</h1>
      <div className="relative">
        {currentPage === 1 && (
          <button
            onClick={prevPage}
            className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black rounded-full p-2 shadow-md z-10"
            aria-label="Previous page"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="size-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"
              />
            </svg>
          </button>
        )}
        <div className="overflow-hidden">
          <ul
            className="flex transition-transform duration-300 ease-in-out"
            style={{ transform: `translateX(-${currentPage * 100}%)` }}
          >
            {products.map((product: Product) => (
              <li key={product.id} className="flex-none w-1/5 px-2">
                <div className="flex flex-col items-center">
                  <div className="relative w-full pt-[140%]">
                    <DynamicTopSellers
                      src={product.media[0].fullUrl}
                      alt={product.name}
                    />
                    <div className="absolute top-0 left-0 bg-orange-500 text-white px-2 py-1  text-sm font-semibold z-10">
                      Best Seller
                    </div>
                  </div>
                  <h2 className="mt-2 text-center text-2xl font-medium">
                    {product.name}
                  </h2>
                  <p className="text-gray-300 text-xl mt-2 mb-4">
                    ${product.price.toFixed(2)}
                  </p>
                  <Button
                    type="Add_to_cart_homepage"
                    productId={product.id}
                    productName={product.name}
                    productImage={product.media[0].fullUrl}
                    productPrice={product.price.toFixed(2)}
                    quantity={1}
                  >
                    Add to cart
                  </Button>
                </div>
              </li>
            ))}
          </ul>
        </div>
        {currentPage === 0 && (
          <button
            onClick={nextPage}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 rounded-full p-2 shadow-md z-10 bg-black"
            aria-label="Next page"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="size-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"
              />
            </svg>
          </button>
        )}
      </div>
    </section>
  );
}

export default TopSeller;

================
File: app/components/Homepage/TopSellerContainer.tsx
================
import TopSeller from "./TopSeller";
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";

async function TopSellerContainer() {
  const Products = await ProductFetcher();
  const bestSellerProducts = Products.filter(
    (product) => product.ribbon === "Best Seller"
  );
  const serializedProducts = bestSellerProducts.map((product) =>
    JSON.parse(JSON.stringify(product))
  );

  return <TopSeller products={serializedProducts} />;
}

export default TopSellerContainer;

================
File: app/components/InterfaceType.tsx
================
import { type StaticImageData } from "next/image";
import { type ReactNode } from "react";
export interface ChildrenProps {
  children: ReactNode;
}

export interface SvgLogoProps {
  width: number;
  height: number;
}

export interface Product {
  productInfo: string;
  productDescription: string;
  id: string;
  options: [];
  customTextFields: [];
  productType: string;
  ribbon: string | null;
  price: number;
  comparePrice: number | null;
  sku: string;
  isInStock: boolean;
  urlPart: string;
  formattedComparePrice: string | null;
  formattedPrice: string;
  pricePerUnit: null | number;
  formattedPricePerUnit: null | string;
  pricePerUnitData: null;
  itemDiscount: null;
  digitalProductFileItems: [];
  name: string;
  media: {
    url: string;
    fullUrl: string;
    index: number;
    width: number;
    mediaType: string;
    altText: string | null;
    title: string;
    height: number;
  }[];
  isManageProductItems: boolean;
  productItemsPreOrderAvailability: string;
  isTrackingInventory: boolean;
  inventory: {
    status: string;
    quantity: number;
    availableForPreOrder: boolean;
    preOrderInfoView: {
      limit: null | number;
    };
  };
  subscriptionPlans: {
    list: [];
  };
  discount: {
    mode: string;
    value: number;
  } | null;
}

export interface Review {
  id: number;
  title: string;
  subtitle: string;
  content: string;
  design: string;
  tags: string[];
  stun: string;
  inspire: string;
  imageUrl: string;
}

export interface ReviewCardProps {
  id: number;
  img: string;
  title: string;
  subtitle: string;
  type?: "homepage";
}

export interface PaymentIconProp {
  src: StaticImageData;
}
export interface IFormInputs {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  subscribe: boolean;
}
export interface ProductCardProps {
  productName: string;
  productImage: string;
  productRibbon: string | null;
  productComparePrice: string | null;
  productPrice: string;
  productId: string;
}
type OrangeButtonSubtype =
  | "shop_now"
  | "default"
  | "learn_about"
  | "premium_area";
export type ButtonType =
  | { type: "orange_button"; subtype: OrangeButtonSubtype }
  | "transparent-button"
  | "Add_to_cart_homepage"
  | "orange_submit_button"
  | "Add_to_cart_productPage"
  | "Buy_now"
  | "clear_cart";

export interface ProductCardContainerProps {
  products: Product[];
}

export interface SearchParams {
  minPrice?: string;
  maxPrice?: string;
}

export interface PageProps {
  searchParams: SearchParams;
}

================
File: app/components/MiniCart.tsx
================
"use client";
import React, { useEffect, useState, useRef } from "react";
import { useAppSelector, useAppDispatch } from "@/app/_lib/hooks";
import { updateQuantity, removeItem } from "@/app/_lib/features/cart/cartSlice";
import Image from "next/image";
import Link from "next/link";
import getStripe from "@/app/_lib/stripe";

const DELIVERY_FEE = 10;

function MiniCart() {
  const cartItems = useAppSelector((state) => state.cart.items);
  const dispatch = useAppDispatch();
  const [isVisible, setIsVisible] = useState(false);
  const [checkoutError, setCheckoutError] = useState<string | null>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(
    function () {
      if (cartItems.length > 0) {
        setIsVisible(true);
        startAutoHideTimer();
      }
    },
    [cartItems.length]
  );

  function startAutoHideTimer() {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    timeoutRef.current = setTimeout(function () {
      setIsVisible(false);
    }, 3000);
  }

  function handleMouseEnter() {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  }

  function handleMouseLeave() {
    startAutoHideTimer();
  }

  async function handleCheckout() {
    try {
      const stripe = await getStripe();

      if (!stripe) {
        throw new Error("Stripe failed to initialize");
      }

      const response = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: cartItems,
          deliveryFee: DELIVERY_FEE,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "An error occurred during checkout");
      }

      const data = await response.json();
      const result = await stripe.redirectToCheckout({
        sessionId: data.id,
      });

      if (result.error) {
        throw new Error(result.error.message);
      }
    } catch (error) {
      console.error("Checkout error:", error);
      if (error instanceof Error) {
        setCheckoutError(error.message);
      } else {
        setCheckoutError("An unexpected error occurred");
      }
    }
  }

  function handleQuantityChange(id: string, newQuantity: number) {
    if (newQuantity > 0) {
      dispatch(updateQuantity({ id, quantity: newQuantity }));
    } else {
      dispatch(removeItem(id));
    }
  }

  if (!isVisible || cartItems.length === 0) return null;

  const subtotal = cartItems.reduce(function (total, item) {
    return total + parseFloat(item.price.replace("$", "")) * item.quantity;
  }, 0);

  return (
    <div
      className={`fixed top-20 -right-96 w-96 bg-gray-900 border border-gray-700 rounded-l-lg shadow-xl z-50 transform transition-transform duration-500 ease-in-out ${
        isVisible ? "translate-x-[-384px]" : "translate-x-0"
      }`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Shopping Cart</h2>
          <button
            onClick={function () {
              setIsVisible(false);
            }}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        {checkoutError && (
          <div className="bg-red-500 text-white p-3 rounded mb-4 text-sm">
            {checkoutError}
          </div>
        )}

        <div className="max-h-[60vh] overflow-y-auto pr-2 space-y-4 mb-4">
          {cartItems.map(function (item) {
            return (
              <div
                key={item.id}
                className="flex items-start gap-4 py-4 border-b border-gray-700"
              >
                <div className="relative w-20 h-20 flex-shrink-0">
                  <Image
                    src={item.image}
                    alt={item.name}
                    fill
                    className="object-cover rounded"
                  />
                </div>
                <div className="flex-grow">
                  <h3 className="font-medium mb-1">{item.name}</h3>
                  <p className="text-orange-500 mb-2">{item.price}</p>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={function () {
                        handleQuantityChange(item.id, item.quantity - 1);
                      }}
                      className="bg-gray-800 text-white px-2 py-1 rounded hover:bg-gray-700 transition-colors"
                    >
                      -
                    </button>
                    <span className="px-2">{item.quantity}</span>
                    <button
                      onClick={function () {
                        handleQuantityChange(item.id, item.quantity + 1);
                      }}
                      className="bg-gray-800 text-white px-2 py-1 rounded hover:bg-gray-700 transition-colors"
                    >
                      +
                    </button>
                    <button
                      onClick={function () {
                        dispatch(removeItem(item.id));
                      }}
                      className="ml-4 text-gray-400 hover:text-red-500 transition-colors"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        <div className="border-t border-gray-700 pt-4 mb-6">
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">
              Subtotal ({cartItems.length} items)
            </span>
            <span className="font-medium">${subtotal.toFixed(2)}</span>
          </div>
          <div className="flex justify-between mb-2">
            <span className="text-gray-400">Delivery Fee</span>
            <span className="font-medium">${DELIVERY_FEE.toFixed(2)}</span>
          </div>
          <div className="flex justify-between mt-2 pt-2 border-t border-gray-700">
            <span className="font-semibold">Total</span>
            <span className="font-semibold">
              ${(subtotal + DELIVERY_FEE).toFixed(2)}
            </span>
          </div>
        </div>

        <div className="flex gap-4">
          <Link
            href="/cart"
            className="flex-1 bg-white text-black py-2 rounded-full text-center hover:bg-gray-200 transition-colors"
          >
            View Cart
          </Link>
          <button
            onClick={handleCheckout}
            className="flex-1 bg-orange-600 text-white py-2 rounded-full text-center hover:bg-orange-700 transition-colors"
          >
            Checkout
          </button>
        </div>
      </div>
    </div>
  );
}

export default MiniCart;

================
File: app/components/PremiumPage/Form.tsx
================
"use client";
import { useForm } from "react-hook-form";
import Button from "@/app/components/Button";
import { IFormInputs } from "@/app/components/InterfaceType";

function Form() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInputs>();

  function onSubmit(data: IFormInputs) {
    console.log(data);
  }

  return (
    <div className="bg-black text-white p-6 max-w-md ">
      <style jsx>{`
        /* Override autofill styles */
        input:-webkit-autofill,
        input:-webkit-autofill:hover,
        input:-webkit-autofill:focus,
        input:-webkit-autofill:active {
          -webkit-background-clip: text;
          -webkit-text-fill-color: white !important;
          transition: background-color 5000s ease-in-out 0s;
          box-shadow: inset 0 0 20px 20px #000000;
        }
      `}</style>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <label htmlFor="firstName" className="block mb-1">
            First Name *
          </label>
          <input
            id="firstName"
            {...register("firstName", { required: "⚠ First name is required" })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.firstName && (
            <span className="text-red-500 text-sm">
              {errors.firstName.message}
            </span>
          )}
        </div>

        <div>
          <label htmlFor="lastName" className="block mb-1">
            Last Name *
          </label>
          <input
            id="lastName"
            {...register("lastName", { required: "⚠ Last name is required" })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.lastName && (
            <span className="text-red-500 text-sm">
              {errors.lastName.message}
            </span>
          )}
        </div>

        <div>
          <label htmlFor="email" className="block mb-1">
            Email *
          </label>
          <input
            id="email"
            type="email"
            {...register("email", {
              required: "⚠ Email is required",
              pattern: {
                value: /^\S+@\S+$/i,
                message: "⚠ Invalid email address",
              },
            })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.email && (
            <span className="text-red-500 text-sm">{errors.email.message}</span>
          )}
        </div>

        <div>
          <label htmlFor="phone" className="block mb-1">
            Phone
          </label>
          <input
            id="phone"
            type="tel"
            {...register("phone")}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
        </div>

        <div className="flex items-center">
          <input
            id="subscribe"
            type="checkbox"
            {...register("subscribe")}
            className="accent-orange-500 mr-3 cursor-pointer"
          />
          <label
            htmlFor="subscribe"
            className="cursor-pointer font-thin text-gray-400"
          >
            Yes, subscribe me to your newsletter.
          </label>
        </div>
        <Button type="orange_submit_button">Subscribe</Button>
      </form>
    </div>
  );
}

export default Form;

================
File: app/components/ProductCard.tsx
================
import { type ProductCardProps } from "./InterfaceType";
import Button from "./Button";
import DynamicProductsBlur from "./DynamicProductsBlur";
import Link from "next/link";

function formatProductName(productName: string) {
  return productName
    .toLowerCase()
    .split(" ")
    .filter((word) => word.trim() !== "")
    .join("-");
}

function ProductCard({ product }: { product: ProductCardProps }) {
  const {
    productName,
    productImage,
    productRibbon,
    productComparePrice,
    productPrice,
    productId,
  } = product;

  return (
    <div className="relative w-full cursor-pointer group">
      <Link
        href={`/product-page/${formatProductName(productName)}`}
        className="block"
      >
        <DynamicProductsBlur src={productImage} name={productName} />
        {productRibbon && (
          <div className="absolute top-0 left-0 bg-orange-500 text-white px-2 py-1 text-sm font-semibold z-10">
            {productRibbon}
          </div>
        )}
        <div className="w-full">
          <div>
            <h1 className="text-lg mb-1 mt-2">{productName}</h1>
            <p>
              {productComparePrice ? (
                <>
                  <s>{productPrice}</s> {productComparePrice}
                </>
              ) : (
                productPrice
              )}
            </p>
          </div>
        </div>
      </Link>
      <div className="w-full opacity-0 group-hover:opacity-100 transition-opacity duration-500">
        <Button
          type="Add_to_cart_productPage"
          productId={productId}
          productName={productName}
          productImage={productImage}
          productPrice={
            productComparePrice ? productComparePrice : productPrice
          }
          quantity={1}
        >
          Add to cart
        </Button>
      </div>
    </div>
  );
}

export default ProductCard;

================
File: app/components/ProductCardContainer.tsx
================
import {
  type Product,
  type ProductCardContainerProps,
  type ProductCardProps,
} from "./InterfaceType";
import ProductCard from "./ProductCard";

function ProductCardContainer({ products }: ProductCardContainerProps) {
  return (
    <>
      {products.map((el: Product) => {
        const product: ProductCardProps = {
          productName: el.name,
          productImage: el.media[0].fullUrl,
          productRibbon: el.ribbon,
          productComparePrice: el.formattedComparePrice,
          productPrice: el.formattedPrice,
          productId: el.id,
        };
        return <ProductCard key={el.id} product={product} />;
      })}
    </>
  );
}

export default ProductCardContainer;

================
File: app/components/ProductSection.tsx
================
"use client";
import { useState } from "react";

function ProductSection({ title, info }: { title: string; info: string }) {
  const [expanded, setExpanded] = useState(false);

  return (
    <div className="border-b pb-4 mb-4">
      <div className="flex text-xl items-center justify-between mb-2">
        <header className="font-semibold">{title}</header>
        <button
          className="text-2xl transition-transform duration-500 ease-in-out"
          onClick={() => {
            setExpanded(!expanded);
          }}
        >
          {expanded ? "−" : "+"}
        </button>
      </div>
      <div
        className={`overflow-hidden transition-all duration-500 ease-in-out ${
          expanded ? "max-h-96" : "max-h-0"
        }`}
      >
        <article>
          <p className="text-pretty">{info}</p>
        </article>
      </div>
    </div>
  );
}

export default ProductSection;

================
File: app/components/ProductSectionContainer.tsx
================
import ProductSection from "./ProductSection";

function ProductSectionContainer({ productInfo }: { productInfo: string }) {
  return (
    <div>
      <ProductSection title={"Product Info"} info={productInfo} />
      <ProductSection
        title={"Return and Refund Policy"}
        info={
          "We offer a 30-day return policy for unused items in original packaging. Refunds will be issued to the original payment method within 5-10 business days of receiving the returned item. Shipping costs are non-refundable. Damaged or defective items may be exchanged for identical products. We reserve the right to deny returns that don't meet our criteria. Contact customer service for return authorization before shipping items back."
        }
      />
      <ProductSection
        title={"Shipping Info"}
        info={
          "We deliver Australia-wide via Australia Post. Standard shipping takes 3-7 business days. Express shipping available for 1-3 business days delivery. Rural areas may experience delays. Tracking provided for all orders. Free shipping on orders over $75. International shipping not available. Order by 2 PM AEST for same-day dispatch on business days. Contact us for bulk orders."
        }
      />
    </div>
  );
}

export default ProductSectionContainer;

================
File: app/components/ProductSideBar.tsx
================
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import PriceRangeComponent from "./SideBarExpand";

function ProductSideBar() {
  const pathname = usePathname();

  const links = [
    { href: "/category/all-products", label: "All Products" },
    { href: "/category/accessories", label: "Accessories" },
    { href: "/category/best-seller", label: "Best Seller" },
    { href: "/category/engine", label: "Engine" },
    { href: "/category/vehicle-body-parts", label: "Vehicle Body Parts" },
    { href: "/category/wheels-and-rims", label: "Wheels & Rims" },
    { href: "/category/wholesale", label: "Wholesale" },
  ];

  return (
    <div>
      <h2 className="text-xl">Browse by</h2>
      <hr className="border border-gray-600 my-4 w-56" />
      <ul className="text-md space-y-1.5">
        {links.map((link) => (
          <li key={link.href}>
            <Link
              href={link.href}
              className={`hover:opacity-60 ${
                pathname === link.href ? "text-orange-500 underline" : ""
              }`}
            >
              {link.label}
            </Link>
          </li>
        ))}
      </ul>
      <h2 className="text-xl mt-10">Filter by</h2>
      <hr className="border border-gray-600 my-4 w-56" />
      <PriceRangeComponent />
    </div>
  );
}

export default ProductSideBar;

================
File: app/components/ProductSubmitComponent.tsx
================
"use client";
import { ChangeEvent, useState } from "react";
import Button from "./Button";
import CartWarning from "./CartWarming";

type media = {
  url: string;
  fullUrl: string;
  index: number;
  width: number;
  mediaType: string;
  altText: string | null;
  title: string;
  height: number;
};

interface ProductSubmitComponentProps {
  id: string;
  name: string;
  media: media[];
  formattedComparePrice: string | null;
  formattedPrice: string;
}

function ProductSubmitComponent({
  id,
  name,
  media,
  formattedComparePrice,
  formattedPrice,
}: ProductSubmitComponentProps) {
  const [quantity, setQuantity] = useState(1);

  const [warning, setWarning] = useState<string>("");

  const handleQuantityChange = (e: ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(e.target.value, 10);

    if (isNaN(value)) {
      setQuantity(0);
      setWarning("Please enter a valid number.");
    } else if (value < 1) {
      setQuantity(1);
      setWarning("Minimum quantity is 1.");
    } else if (value > 10) {
      setQuantity(10);
      setWarning("Maximum quantity is 10.");
    } else {
      setQuantity(value);
      setWarning("");
    }
  };

  return (
    <>
      <CartWarning />
      <div className="space-y-4">
        <input
          value={quantity}
          onChange={handleQuantityChange}
          type="number"
          className="w-20 text-white px-4 py-2 bg-black border-2 border-white rounded-lg hover:border-orange-500 focus:outline-none focus:border-orange-500 transition-colors duration-300"
          max="10"
          min="1"
        />
        {warning && (
          <div
            className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
            role="alert"
          >
            <span className="block sm:inline">{warning}</span>
          </div>
        )}
      </div>
      <Button
        type="Add_to_cart_productPage"
        productId={id}
        productName={name}
        productImage={media[0].fullUrl}
        productPrice={
          formattedComparePrice ? formattedComparePrice : formattedPrice
        }
        quantity={quantity}
      >
        Add to cart
      </Button>
      <Button
        type="Buy_now"
        productId={id}
        productName={name}
        productImage={media[0].fullUrl}
        productPrice={
          formattedComparePrice ? formattedComparePrice : formattedPrice
        }
        quantity={quantity}
      >
        Buy Now
      </Button>
    </>
  );
}

export default ProductSubmitComponent;

================
File: app/components/ReviewPage/ReviewSection.tsx
================
import { Review } from "../InterfaceType";
import { ReviewsFetcher } from "@/app/_lib/DatabaseFetcher";
import ReviewCard from "../Homepage/ReviewCard";
async function ReviewSection() {
  const reviews: Review[] = await ReviewsFetcher();
  return (
    <>
      <h2 className="mt-16">All Posts</h2>
      <div className="flex gap-10 mt-6">
        {reviews.map((review) => (
          <ReviewCard
            id={review.id}
            key={review.id}
            img={review.imageUrl}
            title={review.title}
            subtitle={review.subtitle}
          />
        ))}
      </div>
    </>
  );
}

export default ReviewSection;

================
File: app/components/ScrollTop.tsx
================
"use client";

import { useEffect } from "react";
import { usePathname } from "next/navigation";

export function ScrollToTop() {
  const pathname = usePathname();

  useEffect(() => {
    window.scrollTo(0, 0);
  }, [pathname]);

  return null;
}

================
File: app/components/SideBarExpand.tsx
================
"use client";

import { memo, useCallback, useState, useEffect } from "react";
import Box from "@mui/material/Box";
import Slider from "@mui/material/Slider";
import { styled } from "@mui/material/styles";
import { usePathname, useSearchParams, useRouter } from "next/navigation";

function valuetext(value: number) {
  return value.toString();
}

const WhiteSlider = styled(Slider)({
  color: "white",
  "& .MuiSlider-thumb": {
    backgroundColor: "white",
  },
  "& .MuiSlider-track": {
    backgroundColor: "white",
  },
  "& .MuiSlider-rail": {
    backgroundColor: "rgba(255, 255, 255, 0.3)",
  },
});

interface RangeSliderProps {
  onValueChange?: (value: number[]) => void;
}

function RangeSlider({ onValueChange }: RangeSliderProps) {
  const [value, setValue] = useState<number[]>([0, 130]);
  const [displayMin, setDisplayMin] = useState(0);
  const [displayMax, setDisplayMax] = useState(130);

  const searchParams = useSearchParams();
  const pathName = usePathname();
  const router = useRouter();

  useEffect(() => {
    if (displayMin === 0 && displayMax === 130) {
      const params = new URLSearchParams(searchParams);
      params.delete("minPrice");
      params.delete("maxPrice");
      const newPath = params.toString()
        ? `${pathName}?${params.toString()}`
        : pathName;
      router.replace(newPath, { scroll: false });
    } else {
      const params = new URLSearchParams(searchParams);
      params.set("minPrice", displayMin.toString());
      params.set("maxPrice", displayMax.toString());
      router.replace(`${pathName}?${params.toString()}`, { scroll: false });
    }
  }, [displayMin, displayMax, pathName, router, searchParams]);

  const handleChange = useCallback(
    (event: Event, newValue: number | number[]) => {
      const newValueArray = newValue as number[];
      setValue(newValueArray);
      if (onValueChange) {
        onValueChange(newValueArray);
      }
    },
    [onValueChange]
  );

  const handleChangeCommitted = useCallback(
    (event: React.SyntheticEvent | Event, newValue: number | number[]) => {
      if (Array.isArray(newValue)) {
        const [newMinPrice, newMaxPrice] = newValue;
        setDisplayMin(newMinPrice);
        setDisplayMax(newMaxPrice);
      }
    },
    []
  );

  return (
    <Box sx={{ width: 220 }}>
      <WhiteSlider
        getAriaLabel={() => "Price range"}
        value={value}
        onChange={handleChange}
        onChangeCommitted={handleChangeCommitted}
        valueLabelDisplay="auto"
        getAriaValueText={valuetext}
        min={0}
        max={130}
      />
      <div className="flex justify-between">
        <span>${displayMin}</span>
        <span>${displayMax}</span>
      </div>
    </Box>
  );
}

const MemoizedRangeSlider = memo(RangeSlider);
MemoizedRangeSlider.displayName = "RangeSlider";

export default MemoizedRangeSlider;

================
File: app/dashboard/layout.tsx
================
import DashboardNav from "../components/DashboardNav";
import { ChildrenProps } from "../components/InterfaceType";

function layout({ children }: ChildrenProps) {
  return (
    <div className="mx-14 flex items-start gap-96">
      <DashboardNav />
      {children}
    </div>
  );
}

export default layout;

================
File: app/dashboard/orders/page.tsx
================
export const metadata = {
  title: "Order",
  description: "Order Page",
};

function page() {
  return <div>order</div>;
}

export default page;

================
File: app/dashboard/overview/page.tsx
================
export const metadata = {
  title: "Overview",
  description: "Overview Page",
};
function page() {
  return <div>123</div>;
}

export default page;

================
File: app/dashboard/page.tsx
================
import { redirect } from "next/navigation";
import { auth } from "../auth";

export const metadata = {
  title: "Dashboard",
  description: "Dashboard Page",
};
async function page() {
  const session = await auth();
  if (!session) {
    redirect("/");
  }

  return (
    <div>
      <pre>{JSON.stringify(session, null, 2)}</pre>
    </div>
  );
}

export default page;

================
File: app/dashboard/profile/page.tsx
================
export const metadata = {
  title: "Profile",
  description: "Profile Page",
};
function page() {
  return <div>profile</div>;
}

export default page;

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: app/layout.tsx
================
import Footer from "@/app/components/Footer/Footer";
import Advertisement from "@/app/components/Header/Advertisement";
import Header from "@/app/components/Header/Header";
import Info from "@/app/components/Header/Info";
import NavigationSection from "@/app/components/Header/NavigationSection";
import { type ChildrenProps } from "@/app/components/InterfaceType";
import "@/app/globals.css";
import PremiumHeader from "./components/Header/PremiumHeader";
import AboutUsHeader from "./components/Header/AboutUsHeader";
import StoreProvider from "./StoreProvider";
import { Raleway } from "next/font/google";
import { Metadata } from "next";
import MiniCart from "./components/MiniCart";

const josefin = Raleway({
  weight: ["400"],
  subsets: ["latin"],
  display: "swap",
});

export const metadata: Metadata = {
  authors: [{ name: "Wentao Lin" }],
  keywords:
    "Autopile, Auto Parts, Automotive Parts, Automotive Accessories, Automotive Services, Automotive Parts Online, Automotive Parts Store, Automotive Parts Supplier, Automotive Parts Wholesaler, Automotive Parts Distributor, Automotive Parts Manufacturer, Automotive Parts Retailer, Automotive Parts Supplier, Automotive Parts Wholesaler, Autom",
  title: {
    default: "Welcome | Autopile - Auto Parts",
    template: "%s | Autopile - Auto Parts",
  },
  description:
    "Autopile is a leading online retailer of automotive parts, accessories, and services. We offer a wide range of products from leading brands as well as a comprehensive selection of auto parts, accessories, and services.",
};

export default function RootLayout({ children }: ChildrenProps) {
  return (
    <html lang="en">
      <body className={`bg-black text-white  text-base ${josefin.className}`}>
        <StoreProvider>
          {/* make components server components by passing as props */}
          <Header
            advertisement={<Advertisement />}
            premiumArea={<PremiumHeader />}
            aboutUs={<AboutUsHeader />}
          >
            <Info />
            <NavigationSection />
          </Header>
          {children}
          <Footer />
          <MiniCart />
        </StoreProvider>
      </body>
    </html>
  );
}

================
File: app/middleware.ts
================
export { auth as middleware } from "@/app/auth";

================
File: app/page.tsx
================
import Category from "@/app/components/Homepage/Category";
import LearnMore from "@/app/components/Homepage/LearnMore";
import TopSellerContainer from "@/app/components/Homepage/TopSellerContainer";
import ClubJoin from "@/app/components/Homepage/ClubJoin";
import ProductReview from "@/app/components/Homepage/ProductReview";
import Brands from "./components/Homepage/Brands";
function Page() {
  return (
    <div>
      <Category />
      <LearnMore />
      <TopSellerContainer />
      <ClubJoin />
      <ProductReview />
      <Brands />
    </div>
  );
}

export default Page;

================
File: app/premium-area/page.tsx
================
import Form from "@/app/components/PremiumPage/Form";
import { ScrollToTop } from "@/app/components/ScrollTop";
export const metadata = {
  title: "Premium Area",
  description: "Premium Area Page",
};
function page() {
  return (
    <section className="px-12 pt-24 grid-cols-2 grid">
      <ScrollToTop />
      <div>
        <h1 className="text-4xl leading-normal">
          Sign up today and get
          <br />
          exclusive club member
          <br />
          benefits
        </h1>
        <h2 className="text-xl mt-5 leading-normal">
          Our premium membership will give you <br />
          exclusive access to our early-bird sales,
          <br /> new arrivals and other special offers.{" "}
        </h2>
      </div>
      <Form />
    </section>
  );
}

export default page;

================
File: app/product-page/[productname]/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import DynamicProductPageBlur from "@/app/components/DynamicProductPageBlur";
import ProductSectionContainer from "@/app/components/ProductSectionContainer";
import ProductSubmitComponent from "@/app/components/ProductSubmitComponent";

import Link from "next/link";
export async function generateMetadata({
  params,
}: {
  params: { productname: string };
}) {
  const products = await ProductFetcher();
  const productName = reverseFormat(params.productname);

  const product = products.find((product) => product.name === productName);
  if (product?.name === "Gps") {
    product.name = "GPS";
  }

  return {
    title: product ? `${product.name}` : "Product Not Found",
    description: product ? product.productDescription : "Product not found",
  };
}
function reverseFormat(input: string) {
  return input
    .split("-")
    .map((part) => (part ? part.charAt(0).toUpperCase() + part.slice(1) : ""))
    .join(" ");
}

async function ProductPage({ params }: { params: { productname: string } }) {
  const products = await ProductFetcher();
  const product = products.find(
    (product) => product.name === reverseFormat(params.productname)
  );

  if (!product) {
    return (
      <div className="flex items-center justify-center p-12 text-7xl">
        Product not found
      </div>
    );
  }

  const {
    id,
    name,
    productType,
    media,
    productDescription,
    formattedComparePrice,
    formattedPrice,
    productInfo,
  } = product;

  return (
    <div className="container mx-auto px-4">
      <nav className="text-sm mb-4">
        <Link href="/" className="hover:underline">
          Home
        </Link>
        <span className="mx-2">/</span>
        <Link
          href={`/category/${productType
            .toLowerCase()
            .replace(/\s+&\s+/g, "-and-")
            .replace(/\s+/g, "-")}`}
          className="hover:underline capitalize"
        >
          {productType}
        </Link>
        <span className="mx-2">/</span>
        <span
          className={`${
            name.toLowerCase() === "gps" ? "uppercase" : ""
          } opacity-60`}
        >
          {name}
        </span>
      </nav>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="flex flex-col space-y-8">
          <DynamicProductPageBlur src={media[0].fullUrl} name={name} />
          <p className="text-base mx-16">{productDescription}</p>
        </div>
        <div className="flex flex-col justify-start space-y-5 w-1/2">
          <h1
            className={`${
              name.toLowerCase() === "gps" ? "uppercase" : ""
            } text-4xl mb-4`}
          >
            {name}
          </h1>
          <span className="text-lg opacity-70">
            {formattedComparePrice ? (
              <>
                <s>{formattedPrice}</s> {formattedComparePrice}
              </>
            ) : (
              formattedPrice
            )}
          </span>
          <span className="text-sm">Quantity</span>
          <ProductSubmitComponent
            id={id}
            name={name}
            media={media}
            formattedComparePrice={formattedComparePrice}
            formattedPrice={formattedPrice}
          />
          <ProductSectionContainer productInfo={productInfo} />
        </div>
      </div>
    </div>
  );
}

export default ProductPage;

================
File: app/reviews/page.tsx
================
import ReviewSection from "../components/ReviewPage/ReviewSection";
export const metadata = {
  title: "Review",
  description: "Review Page",
};
function page() {
  return (
    <div className="mx-12 mt-20">
      <section>
        <h1 className="text-6xl">Recommended Products</h1>
        <h2 className="mt-4 text-2xl">Let the community help you shop</h2>
      </section>
      <section>
        <ReviewSection />
      </section>
    </div>
  );
}

export default page;

================
File: app/StoreProvider.tsx
================
"use client";
import { useRef } from "react";
import { Provider } from "react-redux";
import { makeStore, AppStore } from "@/app/_lib/store";

export default function StoreProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const storeRef = useRef<AppStore>();
  if (!storeRef.current) {
    // Create the store instance the first time this renders
    storeRef.current = makeStore();
  }

  return <Provider store={storeRef.current}>{children}</Provider>;
}

================
File: app/success/page.tsx
================
import Link from "next/link";
export const metadata = {
  title: "Payment Success",
  description: "Payment Success Page",
};
export default function SuccessPage() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen text-white">
      <h1 className="text-4xl font-bold mb-4">Thank you for your purchase!</h1>
      <p className="mb-8">Your order has been successfully processed.</p>
      <Link
        href="/"
        className="bg-red-600 text-white py-2 px-4 rounded-full hover:bg-red-700 transition-colors"
      >
        Continue Shopping
      </Link>
    </div>
  );
}

================
File: next.config.mjs
================
import withPlaiceholder from "@plaiceholder/next";

/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "static.wixstatic.com",
        port: "",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "lh3.googleusercontent.com",
        port: "",
        pathname: "/**",
      },
    ],
  },
  webpack: (config, { isServer }) => {
    if (isServer) {
      config.externals.push("sharp");
    }
    return config;
  },
};

export default withPlaiceholder(nextConfig);

================
File: package.json
================
{
  "name": "e-commerce-store",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@mui/material": "^6.1.1",
    "@next/third-parties": "^14.2.13",
    "@plaiceholder/next": "^3.0.0",
    "@reduxjs/toolkit": "^2.2.7",
    "@stripe/stripe-js": "^4.8.0",
    "axios": "^1.7.7",
    "critters": "^0.0.20",
    "localforage": "^1.10.0",
    "lucide-react": "^0.445.0",
    "micro": "^10.0.1",
    "mongodb": "^6.9.0",
    "mongoose": "^8.6.3",
    "next": "^14.2.13",
    "next-auth": "^5.0.0-beta.22",
    "next-csrf": "^0.2.1",
    "plaiceholder": "^3.0.0",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.53.0",
    "react-range": "^1.10.0",
    "react-redux": "^9.1.2",
    "react-scroll-to-top": "^3.0.0",
    "resend": "^4.0.0",
    "sharp": "^0.32.6",
    "stripe": "^17.2.1",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@types/mongoose": "^5.11.96",
    "@types/node": "^22.7.4",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-redux": "^7.1.34",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: product.product.json
================
[
  {
    "_id": "66f2a97e89a001b8f1e08861",
    "id": "60cb23ae-a10d-4e12-9abe-94f4174ee616",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "Sale",
    "price": 9.99,
    "comparePrice": 8.99,
    "sku": "0001",
    "isInStock": true,
    "urlPart": "lamps",
    "formattedComparePrice": "$8.99",
    "formattedPrice": "$9.99",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Lamps",
    "media": [
      {
        "url": "c837a6_b5449b8d8ff54d5f9f09963337ef1067~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_b5449b8d8ff54d5f9f09963337ef1067~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      },
      {
        "url": "c837a6_73ceb473661a40eab0dad350fbcaab7b~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_73ceb473661a40eab0dad350fbcaab7b~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 1,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our automotive lamps are designed to enhance visibility and style for your vehicle. Crafted with high-quality materials, these lamps offer superior illumination and durability. They're easy to install and compatible with a wide range of car models. Whether you're looking to replace old lamps or upgrade your vehicle's lighting system, our lamps provide the perfect blend of functionality and aesthetics. They're energy-efficient, weather-resistant, and comply with all relevant safety standards.",
    "productDescription": "Enhance your vehicle's visibility and style with our high-quality automotive lamps. Designed for easy installation and superior illumination, these durable lamps are the perfect upgrade for any car model."
  },
  {
    "_id": "66f2a97e89a001b8f1e08862",
    "id": "413ac95c-f165-4ff6-9b7c-7c683534a58c",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "Best Seller",
    "price": 120,
    "comparePrice": 0,
    "sku": "0002",
    "isInStock": true,
    "urlPart": "door-handle",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Door Handle",
    "media": [
      {
        "url": "c837a6_d4fcf2e334784b24b28ecff8a9e74be7~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_d4fcf2e334784b24b28ecff8a9e74be7~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our premium door handle is engineered for durability and style. Crafted from high-grade materials, it's designed to withstand frequent use and harsh weather conditions. The ergonomic design ensures a comfortable grip, while the sleek finish adds a touch of elegance to your vehicle. Compatible with a wide range of car models, this door handle is easy to install and comes with all necessary mounting hardware. It's rigorously tested to meet or exceed OEM standards, ensuring long-lasting performance and reliability.",
    "productDescription": "Upgrade your vehicle's exterior with our premium door handle. Combining durability, style, and ease of use, it's the perfect replacement or upgrade for your car's existing handle."
  },
  {
    "_id": "66f2a97e89a001b8f1e08863",
    "id": "a7009a32-c5a9-476a-963a-7a8c2987a38e",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "Best Seller",
    "price": 120,
    "comparePrice": 0,
    "sku": "0003",
    "isInStock": true,
    "urlPart": "gps",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Gps",
    "media": [
      {
        "url": "c837a6_7ceb4b4804c7416cbfd2bf352d0c8eff~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_7ceb4b4804c7416cbfd2bf352d0c8eff~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our state-of-the-art GPS system is designed to provide accurate navigation and enhance your driving experience. Featuring a high-resolution touchscreen display, it offers clear, turn-by-turn directions and real-time traffic updates. The device comes preloaded with detailed maps and points of interest, and supports regular updates to ensure you always have the latest information. With voice command functionality, hands-free operation, and smartphone integration, it offers convenience and safety. The compact design allows for easy installation and portability between vehicles.",
    "productDescription": "Navigate with confidence using our advanced GPS system. Featuring a user-friendly interface, real-time updates, and voice command functionality, it's your perfect companion for any journey."
  },
  {
    "_id": "66f2a97e89a001b8f1e08864",
    "id": "163a3279-b29a-4a67-97bb-ab4a52175a53",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "",
    "price": 120,
    "comparePrice": 0,
    "sku": "0004",
    "isInStock": true,
    "urlPart": "car-mats",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Car Mats",
    "media": [
      {
        "url": "c837a6_feec59fa74784f7d99887a58f9ff9ed8~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_feec59fa74784f7d99887a58f9ff9ed8~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our premium car mats are designed to provide ultimate protection for your vehicle's interior. Made from durable, all-weather materials, they're resistant to water, mud, and debris. The non-slip backing ensures they stay securely in place, while the raised edges contain spills and dirt. These mats are custom-fit to your specific car model, ensuring complete floor coverage. They're easy to clean - simply hose off and air dry. Available in a variety of colors to match your car's interior, these mats combine functionality with style.",
    "productDescription": "Protect your car's interior with our premium, all-weather car mats. Custom-fit, durable, and easy to clean, they offer superior protection against spills, dirt, and wear."
  },
  {
    "_id": "66f2a97e89a001b8f1e08865",
    "id": "74e00a94-f5af-4d0a-976e-d47ce94ff961",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "Sale",
    "price": 120,
    "comparePrice": 108,
    "sku": "0005",
    "isInStock": true,
    "urlPart": "steering-wheel-cover",
    "formattedComparePrice": "$108.00",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Steering Wheel Cover",
    "media": [
      {
        "url": "c837a6_2e35f13454cb4e4498827228bc70a559~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_2e35f13454cb4e4498827228bc70a559~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our steering wheel cover is designed to enhance your driving comfort and protect your steering wheel. Made from premium, breathable materials, it provides a comfortable grip in all weather conditions. The cover is heat and cold resistant, ensuring a consistent feel year-round. Its universal fit makes it suitable for most standard steering wheels. Easy to install, it requires no tools or special skills. The cover not only improves grip and comfort but also protects the original steering wheel from wear and tear, preserving your car's value.",
    "productDescription": "Enhance your driving experience with our premium steering wheel cover. Offering improved grip, comfort, and protection, it's the perfect accessory for any vehicle."
  },
  {
    "_id": "66f2a97e89a001b8f1e08866",
    "id": "409320e4-b9cd-40be-b3e0-2bcd54c97516",
    "options": [],
    "customTextFields": [],
    "productType": "accessories",
    "ribbon": "",
    "price": 120,
    "comparePrice": 0,
    "sku": "0006",
    "isInStock": true,
    "urlPart": "seat-cover",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Seat Cover",
    "media": [
      {
        "url": "c837a6_eebf0094c624498e9a94fede99eeb9ff~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_eebf0094c624498e9a94fede99eeb9ff~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our premium seat covers are designed to provide ultimate comfort and protection for your vehicle's interior. Made from durable, easy-to-clean materials, they're resistant to spills, stains, and wear. The covers feature a universal fit, making them suitable for most car models. They're easy to install and remove for cleaning. These seat covers not only protect your original upholstery but also give your car's interior a fresh, new look. Available in various colors and designs to match your style preferences.",
    "productDescription": "Revitalize your car's interior with our premium seat covers. Offering comfort, protection, and style, they're the perfect solution for preserving your vehicle's upholstery."
  },
  {
    "_id": "66f2a97e89a001b8f1e08867",
    "id": "03f23c2a-8309-479e-9655-e5f40d1dad42",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "Best Seller",
    "price": 120,
    "comparePrice": 0,
    "sku": "0007",
    "isInStock": true,
    "urlPart": "steering-rack",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Steering Rack",
    "media": [
      {
        "url": "c837a6_2a025d5f690d4a979d6730a13ea3c96d~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_2a025d5f690d4a979d6730a13ea3c96d~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our high-quality steering rack is engineered for precision and durability. Manufactured to meet or exceed OEM specifications, it ensures smooth and responsive steering control. This rack is designed for easy installation and is compatible with a wide range of vehicle models. It's constructed from premium materials to resist wear and corrosion, ensuring long-lasting performance. Regular replacement of your steering rack can improve your vehicle's handling and safety.",
    "productDescription": "Upgrade your vehicle's steering system with our premium steering rack. Engineered for precision and durability, it ensures smooth, responsive control for a safer, more enjoyable driving experience."
  },
  {
    "_id": "66f2a97e89a001b8f1e08868",
    "id": "761bb79f-9467-4d8f-9732-bce680ed68c1",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "Sale",
    "price": 120,
    "comparePrice": 108,
    "sku": "0008",
    "isInStock": true,
    "urlPart": "brake-hoses",
    "formattedComparePrice": "$108.00",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Brake Hoses",
    "media": [
      {
        "url": "c837a6_a8e7987786e34028b9723172e527831f~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_a8e7987786e34028b9723172e527831f~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our high-performance brake hoses are designed to enhance your vehicle's braking system. Made from durable, flexible materials, they resist expansion under pressure, ensuring consistent brake pedal feel. These hoses are engineered to withstand extreme temperatures and are resistant to abrasion and corrosion. They meet or exceed DOT specifications for safety and reliability. Easy to install, these brake hoses are compatible with a wide range of vehicle models and come with all necessary fittings.",
    "productDescription": "Upgrade your vehicle's braking performance with our premium brake hoses. Designed for durability and consistent performance, they ensure reliable, responsive braking in all conditions."
  },
  {
    "_id": "66f2a97e89a001b8f1e08869",
    "id": "8e78686e-a8ad-4f76-bdab-2f274bafbb51",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "Best Seller",
    "price": 120,
    "comparePrice": 0,
    "sku": "0009",
    "isInStock": true,
    "urlPart": "brake-cylinder",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Brake Cylinder",
    "media": [
      {
        "url": "c837a6_8020737c00fa4fbe923f97bbeab12351~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_8020737c00fa4fbe923f97bbeab12351~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our brake cylinder is a crucial component of your vehicle's braking system. Manufactured to meet or exceed OEM specifications, it ensures reliable and consistent braking performance. The cylinder is made from high-quality materials to resist corrosion and wear, extending its lifespan. It's designed for easy installation and is compatible with a wide range of vehicle models. Regular replacement of your brake cylinder can significantly improve your vehicle's braking efficiency and overall safety.",
    "productDescription": "Ensure optimal braking performance with our high-quality brake cylinder. Engineered for reliability and longevity, it's an essential component for maintaining your vehicle's safety and performance."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886a",
    "id": "8388a82d-943c-43d2-b074-fa3a729aa844",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "Sale",
    "price": 120,
    "comparePrice": 108,
    "sku": "0010",
    "isInStock": true,
    "urlPart": "brake-disc",
    "formattedComparePrice": "$108.00",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Brake Disc",
    "media": [
      {
        "url": "c837a6_992b4187f25f4e1fb04f759f9bbc3ee5~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_992b4187f25f4e1fb04f759f9bbc3ee5~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our high-performance brake disc is engineered for optimal braking efficiency and durability. Made from premium-grade materials, it offers excellent heat dissipation to prevent brake fade during intense use. The disc features precision machining for smooth, quiet operation and even pad wear. It's designed to meet or exceed OEM specifications and is compatible with a wide range of vehicle models. Regular replacement of your brake discs can significantly improve your vehicle's stopping power and overall safety.",
    "productDescription": "Enhance your vehicle's braking performance with our premium brake disc. Engineered for durability and efficient heat dissipation, it ensures reliable, powerful stopping in all driving conditions."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886b",
    "id": "c0d0996e-2c38-4362-b08e-343f048d422b",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "",
    "price": 120,
    "comparePrice": 0,
    "sku": "0011",
    "isInStock": true,
    "urlPart": "power-steering-pump",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Power Steering Pump",
    "media": [
      {
        "url": "c837a6_c9623e6a69114f69abd6d83635f7c554~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_c9623e6a69114f69abd6d83635f7c554~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our power steering pump is designed to deliver smooth and responsive steering control. Manufactured to meet or exceed OEM specifications, it ensures reliable performance and long service life. The pump features high-quality internal components for efficient operation and reduced noise. It's engineered for easy installation and is compatible with a wide range of vehicle models. Regular replacement of your power steering pump can improve your vehicle's handling and prevent potential steering system failures.",
    "productDescription": "Restore your vehicle's steering responsiveness with our high-quality power steering pump. Engineered for smooth operation and durability, it ensures effortless steering control in all driving conditions."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886c",
    "id": "5f9e2fcf-49ec-4b67-aad8-9231638205ed",
    "options": [],
    "customTextFields": [],
    "productType": "Vehicle Body Parts",
    "ribbon": "Best Seller",
    "price": 120,
    "comparePrice": 0,
    "sku": "0012",
    "isInStock": true,
    "urlPart": "brake-pads",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Brake Pads",
    "media": [
      {
        "url": "c837a6_27f58b0f50264a97a4b9d82f1a75b01f~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_27f58b0f50264a97a4b9d82f1a75b01f~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our high-performance brake pads are engineered for optimal braking efficiency and durability. Made from advanced friction materials, they offer excellent stopping power in various driving conditions. These pads feature low-noise operation and minimal brake dust production. They're designed to meet or exceed OEM specifications and are compatible with a wide range of vehicle models. Regular replacement of your brake pads is crucial for maintaining your vehicle's braking performance and overall safety.",
    "productDescription": "Upgrade your vehicle's braking performance with our premium brake pads. Engineered for superior stopping power and low noise, they ensure reliable braking in all driving conditions."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886d",
    "id": "46d91393-0aab-435d-b026-56b35624f90f",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "Sale",
    "price": 85,
    "comparePrice": 76.5,
    "sku": "0013",
    "isInStock": true,
    "urlPart": "custom",
    "formattedComparePrice": "$76.50",
    "formattedPrice": "$85.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Custom",
    "media": [
      {
        "url": "c837a6_8b8453c494c74c2d95502a8abd5a99a3~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_8b8453c494c74c2d95502a8abd5a99a3~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our custom wheels are designed to enhance your vehicle's appearance and performance. Made from high-quality materials, they offer durability and style. These wheels are available in various sizes, finishes, and designs to suit your personal taste and vehicle specifications. They're engineered for optimal weight distribution and strength, improving your vehicle's handling and fuel efficiency. Our custom wheels meet or exceed industry standards for safety and quality.",
    "productDescription": "Elevate your vehicle's style and performance with our custom wheels. Offering a perfect blend of form and function, they're the ideal upgrade for any car enthusiast."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886e",
    "id": "c71ed085-197c-48e9-884a-2565f8b079bd",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "Best Seller",
    "price": 20,
    "comparePrice": 0,
    "sku": "0014",
    "isInStock": true,
    "urlPart": "4x4",
    "formattedComparePrice": "",
    "formattedPrice": "$20.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "4X4",
    "media": [
      {
        "url": "c837a6_907b8956eaf94b07a51f0f108bab9108~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_907b8956eaf94b07a51f0f108bab9108~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our 4x4 wheels are specifically designed for off-road enthusiasts and adventure seekers. Constructed from robust materials, these wheels offer exceptional durability and strength to withstand rough terrains. They feature an aggressive tread pattern for superior traction in mud, sand, and rocky surfaces. The wheels are engineered to provide optimal weight distribution and heat dissipation, ensuring reliable performance in challenging conditions. Compatible with a wide range of 4x4 vehicles, these wheels combine rugged functionality with striking aesthetics.",
    "productDescription": "Conquer any terrain with our robust 4x4 wheels. Engineered for durability and superior traction, they're the perfect upgrade for off-road enthusiasts and adventure seekers."
  },
  {
    "_id": "66f2a97e89a001b8f1e0886f",
    "id": "ddd6d024-3395-4cf1-9f88-014e1309f5e8",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "",
    "price": 10,
    "comparePrice": 0,
    "sku": "0015",
    "isInStock": true,
    "urlPart": "aluminum",
    "formattedPrice": "$10.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Aluminum",
    "media": [
      {
        "url": "c837a6_6a4c11a1aa80451fa7efbb2ec564a524~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_6a4c11a1aa80451fa7efbb2ec564a524~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our aluminum wheels offer a perfect blend of style, performance, and durability. Crafted from high-grade aluminum alloy, these wheels are significantly lighter than steel alternatives, improving your vehicle's fuel efficiency and handling. They feature a corrosion-resistant finish for long-lasting beauty. The wheels are designed to enhance brake cooling and are available in various sizes and styles to suit different vehicle models. Each wheel undergoes rigorous testing to ensure it meets or exceeds industry safety standards.",
    "productDescription": "Upgrade your vehicle's performance and aesthetics with our lightweight aluminum wheels. Offering improved handling and fuel efficiency, they're the perfect choice for style-conscious drivers."
  },
  {
    "_id": "66f2a97e89a001b8f1e08870",
    "id": "8bfb53c6-0816-4e18-8973-d3e90ca86b31",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "Sale",
    "price": 25,
    "comparePrice": 22.5,
    "sku": "0016",
    "isInStock": true,
    "urlPart": "steel",
    "formattedComparePrice": "$22.50",
    "formattedPrice": "$25.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Steel",
    "media": [
      {
        "url": "c837a6_4824cb74e00f4246aa7604ab960ac14f~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_4824cb74e00f4246aa7604ab960ac14f~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our steel wheels are engineered for maximum durability and strength. Ideal for heavy-duty applications and rough terrains, these wheels can withstand high impacts and loads. They feature a corrosion-resistant coating for longevity in various weather conditions. While heavier than aluminum alternatives, steel wheels offer unmatched robustness and are often more cost-effective. Available in various sizes, these wheels are compatible with a wide range of vehicles, from trucks to SUVs.",
    "productDescription": "Choose our steel wheels for unmatched durability and strength. Perfect for heavy-duty applications, they offer reliable performance in the toughest conditions at an affordable price."
  },
  {
    "_id": "66f2a97e89a001b8f1e08871",
    "id": "e1c1833c-7df1-4f8e-81eb-e7b2ef06e61c",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "",
    "price": 7.5,
    "comparePrice": 0,
    "sku": "0017",
    "isInStock": true,
    "urlPart": "alloy",
    "formattedComparePrice": "",
    "formattedPrice": "$7.50",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Alloy",
    "media": [
      {
        "url": "c837a6_44e0db2f42bd48ff8ea5b3ade29882c1~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_44e0db2f42bd48ff8ea5b3ade29882c1~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our alloy wheels offer the perfect balance between performance and aesthetics. Made from a custom blend of lightweight metals, these wheels provide improved handling and fuel efficiency compared to standard steel wheels. They feature excellent heat dissipation properties, enhancing brake performance. The wheels come in a variety of stylish designs and finishes, allowing you to personalize your vehicle's look. Each wheel is precision-engineered and thoroughly tested to ensure durability and safety.",
    "productDescription": "Enhance your vehicle's performance and style with our premium alloy wheels. Offering improved handling, fuel efficiency, and a range of stylish designs, they're the ultimate upgrade for any car enthusiast."
  },
  {
    "_id": "66f2a97e89a001b8f1e08872",
    "id": "4c426cfa-bf92-4545-aa23-4a03fd666114",
    "options": [],
    "customTextFields": [],
    "productType": "Wheels & Rims",
    "ribbon": "Best Seller",
    "price": 15,
    "comparePrice": 0,
    "sku": "0018",
    "isInStock": true,
    "urlPart": "chrome",
    "formattedComparePrice": "",
    "formattedPrice": "$15.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Chrome",
    "media": [
      {
        "url": "c837a6_024beae3c83d4cfd888b84fac9a5094e~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_024beae3c83d4cfd888b84fac9a5094e~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our chrome wheels are the epitome of luxury and style. These wheels feature a high-quality chrome plating over a durable alloy base, offering a brilliant, mirror-like finish that turns heads. The chrome finish not only enhances aesthetics but also provides excellent corrosion resistance. Despite their flashy appearance, these wheels are engineered for performance, offering good heat dissipation and strength. Available in various sizes and designs, they're compatible with a wide range of vehicle models.",
    "productDescription": "Add a touch of luxury to your vehicle with our stunning chrome wheels. Offering a perfect blend of style and durability, they're the ideal choice for drivers who want to stand out."
  },
  {
    "_id": "66f2a97e89a001b8f1e08873",
    "id": "c5347a46-d6d0-444d-b992-dc67d83c886f",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "Sale",
    "price": 85,
    "comparePrice": 76.5,
    "sku": "0019",
    "isInStock": true,
    "urlPart": "turbocharger",
    "formattedComparePrice": "$76.50",
    "formattedPrice": "$85.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Turbocharger",
    "media": [
      {
        "url": "c837a6_0550d7f901304eff9d178e70edec82d3~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_0550d7f901304eff9d178e70edec82d3~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our high-performance turbocharger is designed to significantly boost your engine's power output. Engineered with precision, it forces more air into the combustion chamber, allowing for more fuel to be added, resulting in increased horsepower and torque. This turbocharger features advanced materials for improved heat resistance and durability. It's compatible with various engine types and sizes, and comes with necessary gaskets for installation. Proper installation can lead to improved fuel efficiency alongside the power increase.",
    "productDescription": "Boost your engine's performance with our high-quality turbocharger. Engineered for increased horsepower and torque, it's the perfect upgrade for performance enthusiasts seeking more power from their engine."
  },
  {
    "_id": "66f2a97e89a001b8f1e08874",
    "id": "db3644f3-c5a5-46c4-a7c6-601c9a4f2c8a",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "",
    "price": 40,
    "comparePrice": 0,
    "sku": "0020",
    "isInStock": true,
    "urlPart": "timing-belt",
    "formattedComparePrice": "",
    "formattedPrice": "$40.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Timing Belt",
    "media": [
      {
        "url": "c837a6_6b51e63633c548d3975e3b8a96acc7c7~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_6b51e63633c548d3975e3b8a96acc7c7~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our high-quality timing belt is a crucial component for maintaining your engine's performance and longevity. Made from durable, heat-resistant materials, it ensures precise synchronization between the crankshaft and camshaft, preventing potential engine damage. This belt features reinforced edges for extended wear resistance and reduced noise. It's designed to meet or exceed OEM specifications and is compatible with a wide range of vehicle models. Regular replacement of your timing belt is essential for preventing costly engine repairs.",
    "productDescription": "Ensure your engine's optimal performance with our durable timing belt. Designed for precision and longevity, it's an essential component for maintaining your vehicle's engine health and preventing costly repairs."
  },
  {
    "_id": "66f2a97e89a001b8f1e08875",
    "id": "6a283cf7-62bf-4f24-bb9c-480ba9eddb86",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "",
    "price": 130,
    "comparePrice": 0,
    "sku": "0021",
    "isInStock": true,
    "urlPart": "cylinder-head-combustion",
    "formattedComparePrice": "",
    "formattedPrice": "$130.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Cylinder Head Combustion",
    "media": [
      {
        "url": "c837a6_e04c204674bb4986a2936c484516e8d3~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_e04c204674bb4986a2936c484516e8d3~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our cylinder head combustion chamber is a critical component for optimizing your engine's performance. Precision-engineered for efficient fuel combustion, it helps improve power output and fuel economy. The chamber is designed to promote better fuel mixture and flame propagation, resulting in more complete combustion. Made from high-grade materials, it offers excellent heat resistance and durability. This component is compatible with various engine types and comes with necessary gaskets for installation.",
    "productDescription": "Optimize your engine's performance with our precision-engineered cylinder head combustion chamber. Designed for efficient fuel combustion, it enhances power output and fuel economy for a superior driving experience."
  },
  {
    "_id": "66f2a97e89a001b8f1e08876",
    "id": "dcce3df4-1387-462c-af43-923ef924153c",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "",
    "price": 45,
    "comparePrice": 0,
    "sku": "0022",
    "isInStock": true,
    "urlPart": "aluminum-piston",
    "formattedComparePrice": "",
    "formattedPrice": "$45.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Aluminum Piston",
    "media": [
      {
        "url": "c837a6_0067e35e1d024222bcc8817746065539~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_0067e35e1d024222bcc8817746065539~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our high-performance aluminum piston is engineered for superior engine efficiency and power. Made from a lightweight, high-strength aluminum alloy, it reduces reciprocating mass for improved engine response and fuel economy. The piston features a precision-machined crown for optimal combustion efficiency and advanced coatings for reduced friction and wear. It's designed to withstand high temperatures and pressures, ensuring long-lasting performance. Compatible with various engine types, this piston comes with piston rings and wrist pin for a complete installation.",
    "productDescription": "Boost your engine's performance with our lightweight aluminum piston. Engineered for improved efficiency and power, it's the perfect upgrade for performance enthusiasts seeking to enhance their engine's capabilities."
  },
  {
    "_id": "66f2a97e89a001b8f1e08877",
    "id": "447a9dbf-4ad0-4515-bd27-a482cf80aff6",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "Sale",
    "price": 100,
    "comparePrice": 90,
    "sku": "0023",
    "isInStock": true,
    "urlPart": "car-engine-clutch",
    "formattedComparePrice": "$90.00",
    "formattedPrice": "$100.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Car Engine Clutch",
    "media": [
      {
        "url": "c837a6_81d47f6969b64d62a3875ff678aad9dc~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_81d47f6969b64d62a3875ff678aad9dc~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 10
    },
    "productInfo": "Our car engine clutch is engineered for smooth and efficient power transmission. It features high-quality friction materials for improved durability and performance. The clutch is designed to handle high torque loads while providing a comfortable pedal feel. It includes a pressure plate, clutch disc, and release bearing for a complete installation. This clutch kit is compatible with various vehicle models and is built to meet or exceed OEM specifications. Regular clutch replacement ensures optimal vehicle performance and prevents transmission damage.",
    "productDescription": "Enhance your vehicle's performance with our high-quality engine clutch. Designed for smooth power transmission and durability, it ensures optimal performance and a comfortable driving experience."
  },
  {
    "_id": "66f2a97e89a001b8f1e08878",
    "id": "4ec7bf5b-0599-444a-a6d5-c2acf912cf15",
    "options": [],
    "customTextFields": [],
    "productType": "engine",
    "ribbon": "",
    "price": 120,
    "comparePrice": 0,
    "sku": "0024",
    "isInStock": true,
    "urlPart": "cylinder-head-gasket",
    "formattedComparePrice": "",
    "formattedPrice": "$120.00",
    "pricePerUnit": null,
    "formattedPricePerUnit": null,
    "pricePerUnitData": null,
    "itemDiscount": null,
    "digitalProductFileItems": [],
    "name": "Cylinder Head Gasket",
    "media": [
      {
        "url": "c837a6_1f843d4034ac41129a48348357a01ce8~mv2.jpg",
        "fullUrl": "https://static.wixstatic.com/media/c837a6_1f843d4034ac41129a48348357a01ce8~mv2.jpg/v1/fit/w_500,h_500,q_90/file.jpg",
        "index": 0,
        "width": 530,
        "mediaType": "PHOTO",
        "altText": null,
        "title": "",
        "height": 708
      }
    ],
    "isManageProductItems": false,
    "productItemsPreOrderAvailability": "no_variants",
    "isTrackingInventory": false,
    "inventory": {
      "status": "in_stock",
      "quantity": 0,
      "availableForPreOrder": false,
      "preOrderInfoView": {
        "limit": null
      }
    },
    "subscriptionPlans": {
      "list": []
    },
    "discount": {
      "mode": "PERCENT",
      "value": 0
    },
    "productInfo": "Our cylinder head gasket is a crucial component for maintaining your engine's compression and preventing coolant and oil leaks. Made from high-quality materials, it's designed to withstand high temperatures and pressures. This gasket features advanced sealing technology for improved durability and leak prevention. It's precision-engineered to fit a wide range of vehicle models and comes with all necessary seals for a complete installation. Regular replacement of your cylinder head gasket is essential for optimal engine performance and longevity.",
    "productDescription": "Ensure your engine's optimal performance with our high-quality cylinder head gasket. Engineered for durability and superior sealing, it's essential for maintaining compression and preventing leaks."
  }
]

================
File: products.json
================
{
    "orders": [
        {
            "id": "cs_test_a1d7zs8nXhmruE561tHg2T9FssqUCDq3ORw8CpLSeiDQ1GBDVVxooC2bWs",
            "amount_total": 1899,
            "currency": "aud",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "shipping_address": {
                "city": "Hillsdale",
                "country": "AU",
                "line1": "106/278 Bunnerong Road",
                "line2": null,
                "postal_code": "2036",
                "state": "NSW"
            },
            "items": [
                {
                    "id": "li_1Q8bp52NEXAeaIGsdNkrsgWs",
                    "description": "Lamps",
                    "quantity": 1,
                    "amount_total": 899
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-11T05:55:35.000Z"
        },
        {
            "id": "cs_test_a1UNPd7HkuQRVnOQIellNeUMPnVCmYBIvwkbKirHBNagmieCd21M0p6hA2",
            "amount_total": 8650,
            "currency": "aud",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8bbZ2NEXAeaIGsiB3sfm6v",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-11T05:41:38.000Z"
        },
        {
            "id": "cs_test_a1TWThWulBMgoISnsoliSZEjeKjhhOqcdur8cuFsHOpcVwJPmqsE50odSz",
            "amount_total": 8650,
            "currency": "aud",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8bIf2NEXAeaIGs4w2mWr2M",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-11T05:22:05.000Z"
        },
        {
            "id": "cs_test_a12nNfIUh7oGyzoWydyr4RuHwJr7lZicQQm3nbx2FRLCRE4Mnd6NX2SIWV",
            "amount_total": 8650,
            "currency": "aud",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "shipping_address": {
                "city": "Hillsdale",
                "country": "AU",
                "line1": "106/278 Bunnerong Road",
                "line2": null,
                "postal_code": "2036",
                "state": "NSW"
            },
            "items": [
                {
                    "id": "li_1Q8bAC2NEXAeaIGsca7FozaJ",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-11T05:13:20.000Z"
        },
        {
            "id": "cs_test_b1yi2XtO0koDqYuDZx13Nmq6hLjeAg7wy5D9SNh39yWlrCivwHeoXYhHtN",
            "amount_total": 11676,
            "currency": "usd",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8Q262NEXAeaIGsGsB5sTsi",
                    "description": "Lamps",
                    "quantity": 2,
                    "amount_total": 1798
                },
                {
                    "id": "li_1Q8Q262NEXAeaIGsFlKqj3J9",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                },
                {
                    "id": "li_1Q8Q262NEXAeaIGsvP2UH7th",
                    "description": "GST",
                    "quantity": 1,
                    "amount_total": 1228
                },
                {
                    "id": "li_1Q8Q262NEXAeaIGshRMB2twQ",
                    "description": "Delivery Fee",
                    "quantity": 1,
                    "amount_total": 1000
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-10T17:20:15.000Z"
        },
        {
            "id": "cs_test_b1pcjQlJOwS1edTepDVeAOJPLNFagYnbOoLXnDUlKe8YoH2swrhfEf4bzG",
            "amount_total": 14560,
            "currency": "usd",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8Puf2NEXAeaIGsvMPdgxms",
                    "description": "Door Handle",
                    "quantity": 1,
                    "amount_total": 12000
                },
                {
                    "id": "li_1Q8Puf2NEXAeaIGsKuCWsQPy",
                    "description": "GST",
                    "quantity": 1,
                    "amount_total": 1560
                },
                {
                    "id": "li_1Q8Puf2NEXAeaIGsZzCwerfD",
                    "description": "Delivery Fee",
                    "quantity": 1,
                    "amount_total": 1000
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-10T17:12:34.000Z"
        },
        {
            "id": "cs_test_b16ovpYw8KturDuM5MtoVB4oConjre3qXSkQBj4GHJ7XiFu8jNitjM23C9",
            "amount_total": 14730,
            "currency": "usd",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8PtN2NEXAeaIGsY35Z4yQX",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                },
                {
                    "id": "li_1Q8PtN2NEXAeaIGsswO7k2Co",
                    "description": "Aluminum Piston",
                    "quantity": 1,
                    "amount_total": 4500
                },
                {
                    "id": "li_1Q8PtN2NEXAeaIGsIV7N9dCR",
                    "description": "GST",
                    "quantity": 1,
                    "amount_total": 1580
                },
                {
                    "id": "li_1Q8PtN2NEXAeaIGsZvI2Japp",
                    "description": "Delivery Fee",
                    "quantity": 1,
                    "amount_total": 1000
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-10T17:11:14.000Z"
        },
        {
            "id": "cs_test_b1tAxuTZhjUhPVVaLMXt0HaetbIAgUDgmoB24hzZrSUXZa1Un4CgGg0Wja",
            "amount_total": 12150,
            "currency": "usd",
            "customer_email": "linwentao888@gmail.com",
            "customer_name": "Wentao Lin",
            "items": [
                {
                    "id": "li_1Q8Pme2NEXAeaIGsYqvKNQn5",
                    "description": "Turbocharger",
                    "quantity": 1,
                    "amount_total": 7650
                },
                {
                    "id": "li_1Q8Pme2NEXAeaIGsbCpqCinN",
                    "description": "Aluminum Piston",
                    "quantity": 1,
                    "amount_total": 4500
                }
            ],
            "payment_status": "paid",
            "created": "2024-10-10T17:04:16.000Z"
        }
    ]
}

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "checkJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "app/api/getBlurData"
  ],
  "exclude": ["node_modules"]
}

================
File: vercel.json
================
{
    "framework": "nextjs"
}
