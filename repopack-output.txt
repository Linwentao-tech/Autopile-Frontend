This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-01T12:42:40.107Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
app/_lib/DatabaseFetcher.tsx
app/_lib/dbConnect.tsx
app/_lib/ProductFilter.tsx
app/api/getBlurData/route.ts
app/api/products/best-sellers/route.ts
app/api/products/route.ts
app/category/all-products/page.tsx
app/category/layout.tsx
app/category/wholesale/page.tsx
app/components/Button.tsx
app/components/DynamicProductsBlur.tsx
app/components/DynamicReviewsPictureBlur.tsx
app/components/DynamicTopSellers.tsx
app/components/Footer/Footer.tsx
app/components/Footer/FooterSection.tsx
app/components/Footer/PaymentIcon.tsx
app/components/Footer/PaymentMethodsSection.tsx
app/components/Footer/PolicySection.tsx
app/components/Header/Advertisement.tsx
app/components/Header/Cart.tsx
app/components/Header/Header.tsx
app/components/Header/Info.tsx
app/components/Header/LoginCart.tsx
app/components/Header/Navigation.tsx
app/components/Header/NavigationSection.tsx
app/components/Header/PremiumHeader.tsx
app/components/Header/SearchForm.tsx
app/components/Header/SearchLoginCartHeader.tsx
app/components/Header/SvgLogo.tsx
app/components/Homepage/Brand.tsx
app/components/Homepage/Brands.tsx
app/components/Homepage/Category.tsx
app/components/Homepage/ClubJoin.tsx
app/components/Homepage/LearnMore.tsx
app/components/Homepage/ProductReview.tsx
app/components/Homepage/ReviewCard.tsx
app/components/Homepage/Table.tsx
app/components/Homepage/TopSeller.tsx
app/components/Homepage/TopSellerContainer.tsx
app/components/InterfaceType.tsx
app/components/PremiumPage/Form.tsx
app/components/ProductCard.tsx
app/components/ProductCardContainer.tsx
app/components/ProductSideBar.tsx
app/components/ReviewPage/ReviewSection.tsx
app/components/SideBarExpand.tsx
app/globals.css
app/layout.tsx
app/page.tsx
app/premium/page.tsx
app/reviews/page.tsx
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/_lib/DatabaseFetcher.tsx
================
import clientPromise from "@/app/_lib/dbConnect";
import { Product, Review } from "../components/InterfaceType";
import { type MongoClient } from "mongodb";
export async function ReviewsFetcher(): Promise<Review[]> {
  try {
    const client: MongoClient = await clientPromise;
    const db = client.db("product");
    const reviews: Review[] = await db
      .collection<Review>("reviews")
      .find({})
      .toArray();
    return reviews;
  } catch (error) {
    console.error("Failed to fetch reviews:", error);
    throw error;
  }
}

export async function ProductFetcher(): Promise<Product[]> {
  try {
    const client: MongoClient = await clientPromise;
    const db = client.db("product");
    const products: Product[] = await db
      .collection<Product>("product")
      .find({})
      .toArray();
    return products;
  } catch (error) {
    console.error("Failed to fetch products:", error);
    throw error;
  }
}

================
File: app/_lib/dbConnect.tsx
================
import { MongoClient } from "mongodb";

if (!process.env.MONGODB_URI) {
  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {
  const globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}
export default clientPromise;

================
File: app/_lib/ProductFilter.tsx
================
import { PageProps, Product } from "../components/InterfaceType";

function ProductFilter({
  searchParams,
  products,
}: PageProps & { products: Product[] }) {
  const minPrice: number | undefined =
    Number(searchParams?.minPrice) || undefined;
  const maxPrice: number | undefined =
    Number(searchParams?.maxPrice) || undefined;

  return products.filter((product) => {
    const price = product.comparePrice || product.price;
    if (minPrice && maxPrice) {
      return price >= minPrice && price <= maxPrice;
    } else if (minPrice) {
      return price >= minPrice;
    } else if (maxPrice) {
      return price <= maxPrice;
    } else {
      return true;
    }
  });
}

export default ProductFilter;

================
File: app/api/getBlurData/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { getPlaiceholder } from "plaiceholder";

export async function GET(request: NextRequest) {
  const url = request.nextUrl.searchParams.get("url");

  if (!url) {
    return NextResponse.json({ error: "URL is required" }, { status: 400 });
  }

  try {
    const buffer = await fetch(url).then(async (res) => {
      return Buffer.from(await res.arrayBuffer());
    });

    const { base64 } = await getPlaiceholder(buffer);

    return NextResponse.json({ blurDataURL: base64 });
  } catch (error) {
    console.error("Error generating blur data:", error);
    return NextResponse.json(
      { error: "Failed to generate blur data" },
      { status: 500 }
    );
  }
}

================
File: app/api/products/best-sellers/route.ts
================
import { NextResponse } from "next/server";
import clientPromise from "@/app/_lib/dbConnect";
import { Product } from "@/app/components/InterfaceType";

export async function GET() {
  try {
    const client = await clientPromise;
    const db = client.db("product");

    const bestSellerProducts = await db
      .collection<Product>("product")
      .find({ ribbon: "Best Seller" })
      .toArray();

    if (bestSellerProducts.length === 0) {
      return NextResponse.json(
        { message: "No best seller products found" },
        { status: 404 }
      );
    }

    return NextResponse.json(bestSellerProducts);
  } catch (e) {
    console.error(e);
    return NextResponse.json(
      { error: "Failed to fetch best seller products" },
      { status: 500 }
    );
  }
}

================
File: app/api/products/route.ts
================
import { NextResponse } from "next/server";

import { Product } from "@/app/components/InterfaceType";
import clientPromise from "@/app/_lib/dbConnect";

export async function GET() {
  try {
    const client = await clientPromise;
    const db = client.db("product");

    const products = await db.collection<Product>("product").find({}).toArray();
    console.log(NextResponse.json(products));

    return NextResponse.json(products);
  } catch (e) {
    console.error(e);
    return NextResponse.json(
      { error: "Failed to fetch products" },
      { status: 500 }
    );
  }
}

================
File: app/category/all-products/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, type Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";

async function page({ searchParams }: PageProps) {
  const products: Product[] = await ProductFetcher();
  const filterProducts = ProductFilter({
    searchParams,
    products: products,
  });

  return (
    <div>
      <h1 className="text-6xl mb-10">All Products</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9 ">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default page;

================
File: app/category/layout.tsx
================
import { ChildrenProps } from "@/app/components/InterfaceType";
import ProductSideBar from "@/app/components/ProductSideBar";
import { Suspense } from "react";

function layout({ children }: ChildrenProps) {
  return (
    <div className="mx-12 flex justify-start gap-7">
      <Suspense>
        <ProductSideBar />
      </Suspense>
      <main>{children}</main>
    </div>
  );
}

export default layout;

================
File: app/category/wholesale/page.tsx
================
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";
import ProductFilter from "@/app/_lib/ProductFilter";
import { PageProps, Product } from "@/app/components/InterfaceType";
import ProductCardContainer from "@/app/components/ProductCardContainer";

async function Page({ searchParams }: PageProps) {
  const products: Product[] = await ProductFetcher();
  const wholesaleProducts: Product[] = products.filter(
    (product) => product.ribbon === "Sale"
  );
  const filterProducts = ProductFilter({
    searchParams,
    products: wholesaleProducts,
  });

  return (
    <div className="bg-red">
      <h1 className="text-6xl mb-10">Wholesale</h1>
      <p className="mb-10">{filterProducts.length} products</p>
      <div className="grid grid-cols-4 gap-9">
        <ProductCardContainer products={filterProducts} />
      </div>
    </div>
  );
}

export default Page;

================
File: app/components/Button.tsx
================
import {
  type ButtonType,
  type ChildrenProps,
} from "@/app/components/InterfaceType";

interface ButtonProps extends ChildrenProps {
  type: ButtonType;
}

function Button({ children, type }: ButtonProps) {
  if (type == "orange_button")
    return (
      <div>
        <button
          className={`bg-orange-700 px-7 py-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
        >
          {children}
        </button>
      </div>
    );
  if (type == "orange_submit_button")
    return (
      <div>
        <button
          className={`bg-orange-700 px-12 py-2 ml-56 mt-4 text-black rounded-full hover:border-white transition-all hover:bg-transparent hover:text-white border-2 border-transparent duration-500`}
        >
          {children}
        </button>
      </div>
    );
  if (type == "transparent-button")
    return (
      <div>
        <button
          className="bg-transparent text-white px-8 py-3  rounded-full  border-2 border-white  hover:bg-orange-700 hover:text-black hover:border-orange-700 
        transition-all duration-500"
        >
          {children}
        </button>
      </div>
    );
  if (type == "Add_to_cart_homepage")
    return (
      <div>
        <button
          className="bg-transparent text-white px-14 py-3  rounded-full  border-2 border-white  hover:bg-white hover:text-black hover:border-white
          transition-all duration-500"
        >
          {children}
        </button>
      </div>
    );
  if (type === "Add_to_cart_productPage")
    return (
      <div className="w-full ">
        <button
          className="bg-transparent text-white rounded-full border-2 border-white hover:bg-white hover:text-black hover:border-white
              transition-all duration-500 mt-5 w-full py-2 px-4"
        >
          {children}
        </button>
      </div>
    );
}

export default Button;

================
File: app/components/DynamicProductsBlur.tsx
================
import Image from "next/image";
import { getPlaiceholder } from "plaiceholder";
async function DynamicProductsBlur({
  src,
  name,
}: {
  src: string;
  name: string;
}) {
  const buffer = await fetch(src).then(async (res) => {
    return Buffer.from(await res.arrayBuffer());
  });

  const { base64 } = await getPlaiceholder(buffer);

  return (
    <div className="overflow-hidden w-full ">
      <Image
        src={src}
        alt={`${name} image`}
        width={600}
        height={600}
        className="object-cover transition-transform duration-300 group-hover:scale-110"
        placeholder="blur"
        blurDataURL={base64}
      />
    </div>
  );
}

export default DynamicProductsBlur;

================
File: app/components/DynamicReviewsPictureBlur.tsx
================
"use client";

import { useState, useEffect } from "react";
import Image from "next/image";

function DynamicReviewsPictureBlur({
  src,
  title,
}: {
  src: string;
  title: string;
}) {
  const [blurDataURL, setBlurDataURL] = useState<string | null>(null);

  useEffect(() => {
    const fetchBlurData = async () => {
      try {
        const response = await fetch(
          `/api/getBlurData?url=${encodeURIComponent(src)}`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch blur data");
        }
        const data = await response.json();
        setBlurDataURL(data.blurDataURL);
      } catch (error) {
        console.error("Error fetching blur data:", error);
      }
    };

    fetchBlurData();
  }, [src]);

  return (
    <div className="relative w-full aspect-[4/3]">
      <Image
        src={src}
        alt={title}
        fill
        className="object-cover"
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
        placeholder={blurDataURL ? "blur" : "empty"}
        blurDataURL={blurDataURL || undefined}
      />
    </div>
  );
}

export default DynamicReviewsPictureBlur;

================
File: app/components/DynamicTopSellers.tsx
================
"use client";
import Image from "next/image";
import { useEffect, useState } from "react";

function DynamicTopSellers({ src, alt }: { src: string; alt: string }) {
  const [blurDataURL, setBlurDataURL] = useState<string | null>(null);

  useEffect(() => {
    const fetchBlurData = async () => {
      try {
        const response = await fetch(
          `/api/getBlurData?url=${encodeURIComponent(src)}`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch blur data");
        }
        const data = await response.json();
        setBlurDataURL(data.blurDataURL);
      } catch (error) {
        console.error("Error fetching blur data:", error);
      }
    };

    fetchBlurData();
  }, [src]);

  return (
    <Image
      src={src}
      alt={alt}
      fill
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 20vw"
      className=" object-cover"
      placeholder={blurDataURL ? "blur" : "empty"}
      blurDataURL={blurDataURL || undefined}
    />
  );
}

export default DynamicTopSellers;

================
File: app/components/Footer/Footer.tsx
================
import SvgLogo from "@/app/components/Header/SvgLogo";
import FooterSection from "@/app/components/Footer/FooterSection";
import PolicySection from "@/app/components/Footer/PolicySection";
import PaymentMethodsSection from "@/app/components/Footer/PaymentMethodsSection";

function Footer() {
  const sections = [
    {
      title: "Shop",
      items: [
        "Shop Parts",
        "Wheels & Rims",
        "Engine",
        "Vehicle Body Parts",
        "Accessories",
        "Wholesale",
      ],
    },
    {
      title: "The Company",
      items: ["About Us", "Reviews", "Premium Area", "FAQ"],
    },
    {
      title: "Contact Us",
      items: [
        "info@mysite.com",
        "500 Terry Francine St.",
        "San Francisco,",
        "CA 94158",
        "Tel: 123-456-7890",
      ],
    },
    {
      title: "Follow Us",
      items: ["Facebook", "Instagram", "Youtube", "Twitter"],
    },
  ];

  return (
    <section className="mx-12 mt-36 mb-14">
      <div className="grid grid-cols-5 items-start justify-items-center mb-20">
        <SvgLogo width={60} height={60} type="logo" />
        {sections.map((section, index) => (
          <FooterSection
            key={index}
            title={section.title}
            items={section.items}
          />
        ))}
      </div>
      <PolicySection />
      <PaymentMethodsSection />
    </section>
  );
}

export default Footer;

================
File: app/components/Footer/FooterSection.tsx
================
import { FooterSectionProps } from "@/app/components/InterfaceType";
function FooterSection({ title, items }: FooterSectionProps) {
  return (
    <section className="pt-5">
      <h3 className="font-bold">{title}</h3>
      <ul className="pt-6 text-sm ">
        {items.map((item, index) => (
          <li className="mb-1.5 text-gray-400" key={index}>
            {item}
          </li>
        ))}
      </ul>
    </section>
  );
}

export default FooterSection;

================
File: app/components/Footer/PaymentIcon.tsx
================
import Image from "next/image";
import { type PaymentIconProp } from "@/app/components/InterfaceType";

function PaymentIcon({ src }: PaymentIconProp) {
  return <Image src={src} alt={`${src} icon`} quality={70} />;
}

export default PaymentIcon;

================
File: app/components/Footer/PaymentMethodsSection.tsx
================
import MasterCard from "@/public/MasterCard.png";
import UnionPay from "@/public/UnionPay.png";
import Diners from "@/public/Diners.png";
import AmericanExpress from "@/public/AmericanExpress.png";
import Discover from "@/public/Discover.png";
import Visa from "@/public/Visa.png";
import PaymentIcon from "./PaymentIcon";

function PaymentMethodsSection() {
  return (
    <>
      <div className="flex justify-center my-6">
        <h3 className="font-bold">Payment Methods</h3>
      </div>
      <div className="flex items-center justify-center gap-5">
        <PaymentIcon src={MasterCard} />
        <PaymentIcon src={UnionPay} />
        <PaymentIcon src={Diners} />
        <PaymentIcon src={AmericanExpress} />
        <PaymentIcon src={Discover} />
        <PaymentIcon src={Visa} />
      </div>
      <hr className="border border-gray-600 mt-10" />
    </>
  );
}

export default PaymentMethodsSection;

================
File: app/components/Footer/PolicySection.tsx
================
function PolicySection() {
  return (
    <section>
      <hr className="border border-gray-600 " />
      <ul className="grid grid-cols-5 items-center justify-items-center my-10 text-gray-400 text-sm">
        <li>Terms & Conditions</li>
        <li className="pr-6">Privacy Policy</li>
        <li>Shipping Policy</li>
        <li className="pr-10">Refund Policy</li>
        <li className="pl-6">Cookie Policy</li>
      </ul>
      <hr className="border border-gray-600 " />
    </section>
  );
}

export default PolicySection;

================
File: app/components/Header/Advertisement.tsx
================
import Button from "../Button";
import SvgLogo from "./SvgLogo";

function Advertisement() {
  return (
    <div className="mt-10 pb-10 m-12">
      <p className="text-4xl">Shop Our Premium Auto Parts</p>
      <p className="text-7xl font-bold mt-8 mb-10">
        Build Your Dream Car Today.
        <br />
        Now 15% Off On All Items.
      </p>
      <Button type="orange_button">Shop Now</Button>
      <div className="flex items-center gap-9">
        <SvgLogo
          width={50}
          height={50}
          type="iconA"
          text={["Free Shipping", "On all orders over 75$"]}
        />
        <SvgLogo
          width={50}
          height={50}
          type="iconB"
          text={["Tested & Proven", "Highest quality testing standards"]}
        />
        <SvgLogo
          width={50}
          height={50}
          type="iconC"
          text={["Customer Service", "Available 24/7"]}
        />
      </div>
    </div>
  );
}

export default Advertisement;

================
File: app/components/Header/Cart.tsx
================
function Cart() {
  return (
    <div>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="size-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"
        />
      </svg>
    </div>
  );
}

export default Cart;

================
File: app/components/Header/Header.tsx
================
"use client";
import { usePathname } from "next/navigation";
import { type ReactNode } from "react";
import { type ChildrenProps } from "../InterfaceType";
import PremiumPageBackGround from "@/public/PremiumAreaBackground.jpg";
import Image from "next/image";
import background from "@/public/background.png";

interface HeaderProps extends ChildrenProps {
  advertisement: ReactNode;
  premiumArea: ReactNode;
}

function Header({ children, advertisement, premiumArea }: HeaderProps) {
  const pathname: string = usePathname();
  const isHomePage: boolean = pathname === "/";
  const isPremiumPage: boolean = pathname === "/premium";
  const isPartsPage: boolean = pathname === "/category/all-products";
  const isReviewsPage: boolean = pathname === "/reviews";
  const isWholesalePage: boolean = pathname === "/category/wholesale";
  return (
    <div className="relative">
      {isHomePage && (
        <video
          className="w-full h-full object-cover absolute z-0"
          autoPlay
          muted
          loop
          playsInline
          preload="auto"
        >
          <source src="/video.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      )}
      {isPremiumPage && (
        <Image
          src={PremiumPageBackGround}
          alt="background"
          className="w-full h-full object-cover absolute z-0"
          placeholder="blur"
          fill
        />
      )}
      {(isReviewsPage || isWholesalePage || isPartsPage) && (
        <Image
          src={background}
          alt="background"
          className="w-full h-full absolute z-0 filter brightness-200"
          placeholder="blur"
          fill
        />
      )}

      <div className="relative z-10">
        <div className="p-12">{children}</div>
        {isHomePage && advertisement}
        {isPremiumPage && premiumArea}
      </div>
    </div>
  );
}

export default Header;

================
File: app/components/Header/Info.tsx
================
import SearchLoginCartHeader from "./SearchLoginCartHeader";

function Info() {
  return (
    <div className="flex items-center justify-between border-b border-white pb-9">
      <p>Free shipping on orders over $75. Call us 123-456-789</p>
      <SearchLoginCartHeader />
    </div>
  );
}

export default Info;

================
File: app/components/Header/LoginCart.tsx
================
function LoginCart() {
  return (
    <div className="flex items-center justify-center">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="size-6"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
        />
      </svg>
      <p>Log In</p>
    </div>
  );
}

export default LoginCart;

================
File: app/components/Header/Navigation.tsx
================
import Link from "next/link";

function Navigation() {
  return (
    <nav>
      <ul className="flex space-x-4 ">
        <li>
          <Link
            href="/category/all-products"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Shop Parts
          </Link>
        </li>
        <li>
          <Link
            href="/category/wholesale"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Wholesale
          </Link>
        </li>
        <li>
          <Link
            href="/reviews"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Reviews
          </Link>
        </li>
        <li>
          <Link
            href="/premium"
            className="hover:text-orange-500 transition-colors duration-500 "
          >
            Premium Area
          </Link>
        </li>
      </ul>
    </nav>
  );
}

export default Navigation;

================
File: app/components/Header/NavigationSection.tsx
================
import Navigation from "./Navigation";
import SvgLogo from "./SvgLogo";

function NavigationSection() {
  return (
    <div className="flex justify-between items-center w-full pt-3 ">
      <SvgLogo width={60} height={60} type="logo" />
      <Navigation />
    </div>
  );
}

export default NavigationSection;

================
File: app/components/Header/PremiumHeader.tsx
================
function PremiumHeader() {
  return (
    <div className="px-12 pt-16 py-48">
      <h1 className="text-6xl mb-6">
        Join Our <br />
        Premium Club
      </h1>
      <h2 className="text-2xl ">For people who love cars</h2>
    </div>
  );
}

export default PremiumHeader;

================
File: app/components/Header/SearchForm.tsx
================
function SearchForm() {
  return (
    <form className="flex items-center border border-white/50 rounded-md p-2 transition-colors  duration-200 ease-in-out hover:border-white/80 focus-within:border-white group">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth={1.5}
        stroke="currentColor"
        className="size-5 mr-2 text-white/50 transition-colors duration-200 ease-in-out group-hover:text-white/80 group-focus-within:text-white"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
        />
      </svg>
      <input
        type="text"
        placeholder="Search..."
        className="bg-transparent w-full focus:outline-none text-white placeholder-white/50"
      />
    </form>
  );
}

export default SearchForm;

================
File: app/components/Header/SearchLoginCartHeader.tsx
================
import Cart from "./Cart";
import LoginCart from "./LoginCart";
import SearchForm from "./SearchForm";

function SearchLoginCartHeader() {
  return (
    <div className="flex items-center justify-between gap-7">
      <SearchForm />
      <LoginCart />
      <Cart />
    </div>
  );
}

export default SearchLoginCartHeader;

================
File: app/components/Header/SvgLogo.tsx
================
"use client";
import Link from "next/link";
import React, { Fragment } from "react";
import { type SvgLogoProps } from "../InterfaceType";
import { usePathname, useRouter } from "next/navigation";

type IconType = "iconA" | "iconB" | "iconC";

interface LogoProps extends SvgLogoProps {
  type: "logo";
}

interface IconProps extends SvgLogoProps {
  type: IconType;
  text: string[];
}

type SvgLogoType = LogoProps | IconProps;
function SvgLogo(props: SvgLogoType) {
  const { width, height, type } = props;
  const pathname: string = usePathname();
  const router = useRouter();
  const isHomePage: boolean = pathname === "/";
  if (type == "logo") {
    const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
      e.preventDefault();

      if (isHomePage) {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      } else {
        router.push("/");
      }
    };
    return (
      <Link
        href="/"
        className="flex items-center space-x-2 text-xl"
        onClick={handleClick}
      >
        <svg
          preserveAspectRatio="xMidYMid meet"
          viewBox="10 55 180 90"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          role="img"
          aria-label="Logo"
          className="fill-current text-white"
        >
          <g>
            <path d="M55 122.5c0 12.426-10.074 22.5-22.5 22.5S10 134.926 10 122.5 20.074 100 32.5 100 55 110.074 55 122.5z" />
            <path d="M167.5 100c-21.039 0-22.501-17.017-22.525-21.453.016-.347.025-.696.025-1.047 0-12.426-10.074-22.5-22.5-22.5h-45C65.074 55 55 65.074 55 77.5S65.074 100 77.5 100h45c20.596 0 22.58 14.832 22.597 20.411A22.889 22.889 0 0 0 145 122.5c0 12.426 10.074 22.5 22.5 22.5s22.5-10.074 22.5-22.5-10.074-22.5-22.5-22.5z" />
          </g>
        </svg>
        <p className="font-semibold">autopile</p>
      </Link>
    );
  }
  if (type == "iconA") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          viewBox="39.995 10 120.005 180.006"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          role="img"
          aria-label="Abstract shape icon"
        >
          <g>
            <path d="M130 70c-28.052 0-30.002-22.69-30.033-28.604.021-.463.033-.928.033-1.396 0-16.569-13.431-30-30-30-16.569 0-30 13.431-30 30 0 16.569 13.431 30 30 30 27.462 0 30.107 19.776 30.13 27.215-.085.917-.13 1.846-.13 2.785 0 16.568 13.431 30 30 30 16.569 0 30-13.431 30-30 0-16.569-13.431-30-30-30z" />
            <path d="M81.483 132.282c15.308 6.34 22.577 23.889 16.236 39.197-6.34 15.307-23.889 22.576-39.197 16.236-15.307-6.341-22.576-23.89-16.236-39.197 6.341-15.308 23.89-22.577 39.197-16.236z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
  if (type == "iconB") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          data-bbox="10 10 180 180"
          viewBox="10 10 180 180"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          data-type="shape"
          role="presentation"
          aria-hidden="true"
        >
          <g>
            <path d="M130 40c0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30 0-16.569 13.431-30 30-30 16.569 0 30 13.431 30 30z" />
            <path d="M130 160c0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30 0-16.569 13.431-30 30-30 16.569 0 30 13.431 30 30z" />
            <path d="M160 70a29.883 29.883 0 0 0-20.073 7.709v-.002c-42.182 30.214-79.856 0-79.856 0A29.883 29.883 0 0 0 40 70c-16.568 0-30 13.432-30 30s13.432 30 30 30a29.873 29.873 0 0 0 19.306-7.044c41.307-26.483 80.621-.664 80.621-.664v-.001A29.883 29.883 0 0 0 160 130c16.569 0 30-13.431 30-30s-13.431-30-30-30z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
  if (type == "iconC") {
    const { text } = props;
    return (
      <div className="flex items-center mt-16 gap-5">
        <svg
          className="text-white fill-current "
          preserveAspectRatio="xMidYMid meet"
          data-bbox="10 9.983 180.001 180.034"
          viewBox="10 9.983 180.001 180.034"
          width={width}
          height={height}
          xmlns="http://www.w3.org/2000/svg"
          data-type="shape"
          role="presentation"
          aria-hidden="true"
        >
          <g>
            <path d="M189.318 145.617a37.186 37.186 0 0 0-2.362-7.633 37.17 37.17 0 0 0-7.874-11.607c-24.649-24.649-6.425-46.299-1.256-51.523.425-.388.845-.786 1.256-1.198 14.558-14.558 14.558-38.162 0-52.721-14.559-14.558-38.162-14.558-52.721 0-14.558 14.559-14.558 38.162 0 52.721 24.13 24.13 9.078 43.83 2.561 50.388-.182.151-.358.313-.539.468-.24.207-.482.41-.717.624a36.2 36.2 0 0 0-1.305 1.241c-24.649 24.649-46.299 6.425-51.523 1.256a37.158 37.158 0 0 0-1.198-1.256c-14.558-14.558-38.162-14.558-52.721 0-14.558 14.558-14.558 38.162 0 52.721 14.558 14.558 38.162 14.558 52.721 0 24.13-24.13 43.83-9.078 50.388-2.561.15.181.311.356.465.535.208.241.412.484.627.721.398.438.807.87 1.229 1.293l.011.012a37.275 37.275 0 0 0 9.024 6.654 37.094 37.094 0 0 0 3.724 1.692c1.227.481 2.475.891 3.737 1.237a37.32 37.32 0 0 0 4.164.892c.191.029.381.06.572.086 1.69.234 3.393.355 5.096.357l.043.001a37.432 37.432 0 0 0 12.333-2.09 37.008 37.008 0 0 0 6.61-3.071 37.704 37.704 0 0 0 9.977-8.589 37.058 37.058 0 0 0 4.095-6.193 37.174 37.174 0 0 0 4.094-13.763 37.414 37.414 0 0 0 0-7.146 37.32 37.32 0 0 0-.511-3.548z" />
            <path d="M84.462 47.214c0 20.562-16.669 37.231-37.231 37.231S10 67.776 10 47.214 26.669 9.983 47.231 9.983s37.231 16.669 37.231 37.231z" />
          </g>
        </svg>
        <div className="w-1 h-20 bg-orange-500" />
        <p>
          {text.map((line, index) => (
            <Fragment key={index}>
              {index === 1 ? <i>{line}</i> : line}
              {index < text.length - 1 && <br />}
            </Fragment>
          ))}
        </p>
      </div>
    );
  }
}

export default SvgLogo;

================
File: app/components/Homepage/Brand.tsx
================
import { type ReactNode } from "react";

type BrandProps = {
  children: ReactNode;
};

function Brand({ children }: BrandProps) {
  return (
    <section className="border border-gray-600 relative w-[700px] h-[260px]">
      {children}
    </section>
  );
}

export default Brand;

================
File: app/components/Homepage/Brands.tsx
================
import Image from "next/image";
import Brand from "./Brand";
import Drivilux from "@/public/Drivilux.png";
import Drivery from "@/public/Drivery.png";
import Autopartse from "@/public/Autopartse.png";
import Wheelbu from "@/public/Wheelbu.png";
import Motorks from "@/public/Motorks.png";
function Brands() {
  return (
    <section className="mx-12">
      <h1 className="text-4xl mb-10">Brands We Trust</h1>
      <section className="flex items-center justify-center">
        <Brand>
          <Image
            src={Drivilux}
            alt="Drivilux brand"
            fill
            placeholder="blur"
            className="p-20 object-contain"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </Brand>
        <Brand>
          <Image
            src={Autopartse}
            alt="Autopartse brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Wheelbu}
            alt="Wheelbu brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Motorks}
            alt="Motorks brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
        <Brand>
          <Image
            src={Drivery}
            alt="Drivery brand"
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            placeholder="blur"
            className="p-20 object-contain"
          />
        </Brand>
      </section>
    </section>
  );
}

export default Brands;

================
File: app/components/Homepage/Category.tsx
================
import Button from "../Button";
import image1 from "../../../public/image1.webp";
import image2 from "../../../public/image2.webp";
import image3 from "../../../public/image3.webp";
import image4 from "../../../public/image4.webp";
import Image from "next/image";

function Category() {
  return (
    <div className="mx-4 sm:mx-8 md:mx-12">
      <header className="flex flex-col sm:flex-row items-center justify-between mb-6 ">
        <h1 className="text-2xl sm:text-3xl mb-4 sm:mb-0">Shop by Category</h1>
        <Button type="transparent-button">Shop</Button>
      </header>
      <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 ">
        {[image1, image2, image3, image4].map((image, index) => (
          <div
            key={index}
            className="relative w-full aspect-[4/4] overflow-hidden"
          >
            <Image
              src={image}
              alt={`Category ${index + 1}`}
              placeholder="blur"
              fill
              sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw"
              className="object-cover transition-transform duration-500 ease-in-out hover:scale-110"
            />
          </div>
        ))}
      </section>
    </div>
  );
}

export default Category;

================
File: app/components/Homepage/ClubJoin.tsx
================
import Image from "next/image";
import background from "../../../public/carbackground2.jpg";
import Button from "../Button";

function ClubJoin() {
  return (
    <section className="relative">
      <Image
        className="object-cover"
        src={background}
        alt="car background image"
        quality={100}
        placeholder="blur"
        fill
        sizes="100vw"
        priority
      />
      <div className="relative z-10 p-6 text-white">
        <div className="relative ml-5 ">
          <h1 className="text-5xl  mb-10 font-smibold mt-40 ">
            Join Our <br />
            Premium Club
          </h1>
          <hr className="my-4 border-t border-white  w-[700px] " />
          <p className="text-2xl mb-10 mt-10">
            Our premium membership will give you exclusive access to <br /> our
            early-bird sales, new arrivals and other special offers.{" "}
          </p>
          <div className="mb-40">
            <Button type="orange_button">Join Now</Button>
          </div>
        </div>
      </div>
    </section>
  );
}

export default ClubJoin;

================
File: app/components/Homepage/LearnMore.tsx
================
import Image from "next/image";
import background from "../../../public/carbackground.jpg";
import Button from "../Button";
import Table from "./Table";

function LearnMore() {
  return (
    <section className="relative">
      <Image
        className="object-cover"
        src={background}
        alt="car background image"
        placeholder="blur"
        fill
        sizes="100vw"
        priority
      />
      <div className="relative z-10 p-6 text-white">
        <div className="relative ml-5 ">
          <h1 className="text-5xl mb-24 font-smibold pt-40 ">
            The One-Stop Shop for <br />
            Automotive Enthusiasts
          </h1>
          <Table />
          <div className="mb-24 ">
            <Button type="orange_button">Learn More</Button>
          </div>
        </div>
      </div>
    </section>
  );
}

export default LearnMore;

================
File: app/components/Homepage/ProductReview.tsx
================
import ReviewCard from "./ReviewCard";
import { Review } from "../InterfaceType";
import { ReviewsFetcher } from "@/app/_lib/DatabaseFetcher";

async function ProductReview() {
  const reviews: Review[] = await ReviewsFetcher();

  return (
    <section className="mx-12 my-16">
      <h1 className="text-4xl">Product Reviews</h1>
      <div className="flex gap-10 items-center mt-9">
        {reviews.map((review) => (
          <ReviewCard
            id={review.id}
            key={review.id}
            img={review.imageUrl}
            title={review.title}
            subtitle={review.subtitle}
            type="homepage"
          />
        ))}
      </div>
    </section>
  );
}

export default ProductReview;

================
File: app/components/Homepage/ReviewCard.tsx
================
"use client";
import { useState } from "react";
import Image from "next/image";
import { ReviewCardProps } from "../InterfaceType";
import DynamicReviewsPictureBlur from "../DynamicReviewsPictureBlur";

function ReviewCard({ id, img, title, subtitle, type }: ReviewCardProps) {
  const [isLiked, setIsLiked] = useState(false);
  if (type == "homepage") {
    if (id !== 4) {
      return (
        <section className="border border-gray-800 max-w-sm">
          <DynamicReviewsPictureBlur src={img} title={title} />
          <section className="px-6">
            <h1 className="text-lg font-bold my-6 break-words">{title}</h1>
            <h2 className="my-6 break-words text-sm">
              {subtitle.split(" ").slice(0, 10).join(" ")}
              {subtitle.split(" ").length > 10 ? "..." : ""}
            </h2>
            <hr className="border-gray-800" />
            <div className="py-4 flex items-center justify-between">
              <section className="flex items-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M8.625 9.75a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375m-13.5 3.01c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.184-4.183a1.14 1.14 0 0 1 .778-.332 48.294 48.294 0 0 0 5.83-.498c1.585-.233 2.708-1.626 2.708-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                  />
                </svg>
                0
              </section>
              <section
                className="flex items-center gap-1 cursor-pointer"
                onClick={() => setIsLiked(!isLiked)}
              >
                {isLiked ? "1" : "0"}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className={`size-6 transition-all duration-300 ease-in-out ${
                    isLiked
                      ? "fill-red-600 text-red-600 scale-125"
                      : "fill-none text-current scale-100"
                  }`}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                  />
                </svg>
              </section>
            </div>
          </section>
        </section>
      );
    }
  } else {
    return (
      <section className="border border-gray-800 max-w-sm">
        <div className="relative w-full aspect-[4/3]">
          <Image
            src={img}
            alt={title}
            fill
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>
        <section className="px-6">
          <h1 className="text-lg font-bold my-6 break-words">{title}</h1>
          <h2 className="my-6 break-words text-sm">
            {subtitle.split(" ").slice(0, 10).join(" ")}
            {subtitle.split(" ").length > 10 ? "..." : ""}
          </h2>
          <hr className="border-gray-800" />
          <div className="py-4 flex items-center justify-between">
            <section className="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="size-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M8.625 9.75a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375m-13.5 3.01c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.184-4.183a1.14 1.14 0 0 1 .778-.332 48.294 48.294 0 0 0 5.83-.498c1.585-.233 2.708-1.626 2.708-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                />
              </svg>
              0
            </section>
            <section
              className="flex items-center gap-1 cursor-pointer"
              onClick={() => setIsLiked(!isLiked)}
            >
              {isLiked ? "1" : "0"}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className={`size-6 transition-all duration-300 ease-in-out ${
                  isLiked
                    ? "fill-red-600 text-red-600 scale-125"
                    : "fill-none text-current scale-100"
                }`}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
                />
              </svg>
            </section>
          </div>
        </section>
      </section>
    );
  }
}

export default ReviewCard;

================
File: app/components/Homepage/Table.tsx
================
function Table() {
  return (
    <table className="table-auto border border-white border-collapse text-sm mb-24">
      <tbody>
        <tr>
          <td className="border-white border py-9 pl-9 pr-44">
            Free in-store or <br /> curbside pickup
          </td>
          <td className="border-white border py-9 pl-9 pr-44">
            Personalized care including <br />
            battery testing and installation
          </td>
        </tr>
        <tr>
          <td className="border-white border py-9 pl-9 pr-44">
            Certified <br />
            technicians only
          </td>
          <td className="border-white border py-9 pl-9 pr-44">
            Get points for every purchase.
            <br />
            Redeem points for rewards
          </td>
        </tr>
      </tbody>
    </table>
  );
}

export default Table;

================
File: app/components/Homepage/TopSeller.tsx
================
"use client";
import React, { useState } from "react";
import { Product } from "../InterfaceType";
import Button from "../Button";
import DynamicTopSellers from "../DynamicTopSellers";

function TopSeller({ products }: { products: Product[] }) {
  const [currentPage, setCurrentPage] = useState(0);
  const productsPerPage = 5;

  const nextPage = () => {
    setCurrentPage(
      (prev) => (prev + 1) % Math.ceil(products.length / productsPerPage)
    );
  };

  const prevPage = () => {
    setCurrentPage(
      (prev) =>
        (prev - 1 + Math.ceil(products.length / productsPerPage)) %
        Math.ceil(products.length / productsPerPage)
    );
  };

  return (
    <section className="w-full mt-20 mb-44">
      <h1 className="text-4xl mb-6 px-4 mx-8">Top Sellers</h1>
      <div className="relative">
        {currentPage === 1 && (
          <button
            onClick={prevPage}
            className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black rounded-full p-2 shadow-md z-10"
            aria-label="Previous page"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="size-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"
              />
            </svg>
          </button>
        )}
        <div className="overflow-hidden">
          <ul
            className="flex transition-transform duration-300 ease-in-out"
            style={{ transform: `translateX(-${currentPage * 100}%)` }}
          >
            {products.map((product: Product) => (
              <li key={product.id} className="flex-none w-1/5 px-2">
                <div className="flex flex-col items-center">
                  <div className="relative w-full pt-[140%]">
                    <DynamicTopSellers
                      src={product.media[0].fullUrl}
                      alt={product.name}
                    />
                    <div className="absolute top-0 left-0 bg-orange-500 text-white px-2 py-1  text-sm font-semibold z-10">
                      Best Seller
                    </div>
                  </div>
                  <h2 className="mt-2 text-center text-2xl font-medium">
                    {product.name}
                  </h2>
                  <p className="text-gray-300 text-xl mt-2 mb-4">
                    ${product.price.toFixed(2)}
                  </p>
                  <Button type="Add_to_cart_homepage">Add to cart</Button>
                </div>
              </li>
            ))}
          </ul>
        </div>
        {currentPage === 0 && (
          <button
            onClick={nextPage}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 rounded-full p-2 shadow-md z-10 bg-black"
            aria-label="Next page"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="size-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"
              />
            </svg>
          </button>
        )}
      </div>
    </section>
  );
}

export default TopSeller;

================
File: app/components/Homepage/TopSellerContainer.tsx
================
import TopSeller from "./TopSeller";
import { ProductFetcher } from "@/app/_lib/DatabaseFetcher";

async function TopSellerContainer() {
  const Products = await ProductFetcher();
  const bestSellerProducts = Products.filter(
    (product) => product.ribbon === "Best Seller"
  );
  const serializedProducts = bestSellerProducts.map((product) =>
    JSON.parse(JSON.stringify(product))
  );

  return <TopSeller products={serializedProducts} />;
}

export default TopSellerContainer;

================
File: app/components/InterfaceType.tsx
================
import { type StaticImageData } from "next/image";
import { type ReactNode } from "react";
export interface ChildrenProps {
  children: ReactNode;
}

export interface SvgLogoProps {
  width: number;
  height: number;
}

export interface Product {
  id: string;
  options: [];
  customTextFields: [];
  productType: string;
  ribbon: string | null;
  price: number;
  comparePrice: number | null;
  sku: string;
  isInStock: boolean;
  urlPart: string;
  formattedComparePrice: string | null;
  formattedPrice: string;
  pricePerUnit: null | number;
  formattedPricePerUnit: null | string;
  pricePerUnitData: null;
  itemDiscount: null;
  digitalProductFileItems: [];
  name: string;
  media: {
    url: string;
    fullUrl: string;
    index: number;
    width: number;
    mediaType: string;
    altText: string | null;
    title: string;
    height: number;
  }[];
  isManageProductItems: boolean;
  productItemsPreOrderAvailability: string;
  isTrackingInventory: boolean;
  inventory: {
    status: string;
    quantity: number;
    availableForPreOrder: boolean;
    preOrderInfoView: {
      limit: null | number;
    };
  };
  subscriptionPlans: {
    list: [];
  };
  discount: {
    mode: string;
    value: number;
  } | null;
}

export interface Review {
  id: number;
  title: string;
  subtitle: string;
  content: string;
  design: string;
  tags: string[];
  stun: string;
  inspire: string;
  imageUrl: string;
}

export interface ReviewCardProps {
  id: number;
  img: string;
  title: string;
  subtitle: string;
  type?: "homepage";
}

export interface FooterSectionProps {
  title: string;
  items: string[];
}

export interface PaymentIconProp {
  src: StaticImageData;
}
export interface IFormInputs {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  subscribe: boolean;
}
export interface ProductCardProps {
  productName: string;
  productImage: string;
  productRibbon: string | null;
  productComparePrice: string | null;
  productPrice: string;
}

export type ButtonType =
  | "orange_button"
  | "transparent-button"
  | "Add_to_cart_homepage"
  | "orange_submit_button"
  | "Add_to_cart_productPage";

export interface ProductCardContainerProps {
  products: Product[];
}

export interface SearchParams {
  minPrice?: string;
  maxPrice?: string;
}

export interface PageProps {
  searchParams: SearchParams;
}

================
File: app/components/PremiumPage/Form.tsx
================
"use client";
import { useForm } from "react-hook-form";
import Button from "@/app/components/Button";
import { IFormInputs } from "@/app/components/InterfaceType";

function Form() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInputs>();

  function onSubmit(data: IFormInputs) {
    console.log(data);
  }

  return (
    <div className="bg-black text-white p-6 max-w-md ">
      <style jsx>{`
        /* Override autofill styles */
        input:-webkit-autofill,
        input:-webkit-autofill:hover,
        input:-webkit-autofill:focus,
        input:-webkit-autofill:active {
          -webkit-background-clip: text;
          -webkit-text-fill-color: white !important;
          transition: background-color 5000s ease-in-out 0s;
          box-shadow: inset 0 0 20px 20px #000000;
        }
      `}</style>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <label htmlFor="firstName" className="block mb-1">
            First Name *
          </label>
          <input
            id="firstName"
            {...register("firstName", { required: "⚠ First name is required" })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.firstName && (
            <span className="text-red-500 text-sm">
              {errors.firstName.message}
            </span>
          )}
        </div>

        <div>
          <label htmlFor="lastName" className="block mb-1">
            Last Name *
          </label>
          <input
            id="lastName"
            {...register("lastName", { required: "⚠ Last name is required" })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.lastName && (
            <span className="text-red-500 text-sm">
              {errors.lastName.message}
            </span>
          )}
        </div>

        <div>
          <label htmlFor="email" className="block mb-1">
            Email *
          </label>
          <input
            id="email"
            type="email"
            {...register("email", {
              required: "⚠ Email is required",
              pattern: {
                value: /^\S+@\S+$/i,
                message: "⚠ Invalid email address",
              },
            })}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
          {errors.email && (
            <span className="text-red-500 text-sm">{errors.email.message}</span>
          )}
        </div>

        <div>
          <label htmlFor="phone" className="block mb-1">
            Phone
          </label>
          <input
            id="phone"
            type="tel"
            {...register("phone")}
            className="w-full bg-black border-b border-gray-600 py-2 focus:outline-none focus:border-white text-white"
          />
        </div>

        <div className="flex items-center">
          <input
            id="subscribe"
            type="checkbox"
            {...register("subscribe")}
            className="accent-orange-500 mr-3 cursor-pointer"
          />
          <label
            htmlFor="subscribe"
            className="cursor-pointer font-thin text-gray-400"
          >
            Yes, subscribe me to your newsletter.
          </label>
        </div>
        <Button type="orange_submit_button">Subscribe</Button>
      </form>
    </div>
  );
}

export default Form;

================
File: app/components/ProductCard.tsx
================
import { type ProductCardProps } from "./InterfaceType";
import Button from "./Button";
import DynamicProductsBlur from "./DynamicProductsBlur";

function ProductCard({ product }: { product: ProductCardProps }) {
  const {
    productName,
    productImage,
    productRibbon,
    productComparePrice,
    productPrice,
  } = product;
  return (
    <div className="relative w-full cursor-pointer group">
      <DynamicProductsBlur src={productImage} name={productName} />
      {productRibbon && (
        <div className="absolute top-0 left-0 bg-orange-500 text-white px-2 py-1 text-sm font-semibold z-10">
          {productRibbon}
        </div>
      )}
      <div className="w-full">
        <div>
          <h1 className="text-lg mb-1 mt-2">{productName}</h1>
          <p>
            {productComparePrice ? (
              <>
                <s>{productPrice}</s> {productComparePrice}
              </>
            ) : (
              productPrice
            )}
          </p>
          <div className="w-full opacity-0 group-hover:opacity-100 transition-opacity duration-500 ">
            <Button type="Add_to_cart_productPage">Add to cart</Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProductCard;

================
File: app/components/ProductCardContainer.tsx
================
import {
  type Product,
  type ProductCardContainerProps,
  type ProductCardProps,
} from "./InterfaceType";
import ProductCard from "./ProductCard";

function ProductCardContainer({ products }: ProductCardContainerProps) {
  return (
    <>
      {products.map((el: Product) => {
        const product: ProductCardProps = {
          productName: el.name,
          productImage: el.media[0].fullUrl,
          productRibbon: el.ribbon,
          productComparePrice: el.formattedComparePrice,
          productPrice: el.formattedPrice,
        };
        return <ProductCard key={el.id} product={product} />;
      })}
    </>
  );
}

export default ProductCardContainer;

================
File: app/components/ProductSideBar.tsx
================
import PriceRangeComponent from "./SideBarExpand";

function ProductSideBar() {
  return (
    <div>
      <h2 className="text-xl">Browse by</h2>
      <hr className="border border-gray-600 my-4 w-56" />
      <ul className="text-md space-y-1.5">
        <li>All Products</li>
        <li>Accessories</li>
        <li>Best Seller</li>
        <li>Engine</li>
        <li>Vehicle Body Parts</li>
        <li>Wheels & Rims</li>
        <li>Wholesale</li>
      </ul>
      <h2 className="text-xl mt-10">Filter by</h2>
      <hr className="border border-gray-600 my-4 w-56" />
      <PriceRangeComponent />
    </div>
  );
}

export default ProductSideBar;

================
File: app/components/ReviewPage/ReviewSection.tsx
================
import { Review } from "../InterfaceType";
import { ReviewsFetcher } from "@/app/_lib/DatabaseFetcher";
import ReviewCard from "../Homepage/ReviewCard";
async function ReviewSection() {
  const reviews: Review[] = await ReviewsFetcher();
  return (
    <>
      <h2 className="mt-16">All Posts</h2>
      <div className="flex gap-10 mt-6">
        {reviews.map((review) => (
          <ReviewCard
            id={review.id}
            key={review.id}
            img={review.imageUrl}
            title={review.title}
            subtitle={review.subtitle}
          />
        ))}
      </div>
    </>
  );
}

export default ReviewSection;

================
File: app/components/SideBarExpand.tsx
================
"use client";

import { memo, useCallback, useState, useEffect } from "react";
import Box from "@mui/material/Box";
import Slider from "@mui/material/Slider";
import { styled } from "@mui/material/styles";
import { usePathname, useSearchParams, useRouter } from "next/navigation";

function valuetext(value: number) {
  return value.toString();
}

const WhiteSlider = styled(Slider)({
  color: "white",
  "& .MuiSlider-thumb": {
    backgroundColor: "white",
  },
  "& .MuiSlider-track": {
    backgroundColor: "white",
  },
  "& .MuiSlider-rail": {
    backgroundColor: "rgba(255, 255, 255, 0.3)",
  },
});

interface RangeSliderProps {
  onValueChange?: (value: number[]) => void;
}

function RangeSlider({ onValueChange }: RangeSliderProps) {
  const [value, setValue] = useState<number[]>([0, 130]);
  const [displayMin, setDisplayMin] = useState(0);
  const [displayMax, setDisplayMax] = useState(130);

  const searchParams = useSearchParams();
  const pathName = usePathname();
  const router = useRouter();

  useEffect(() => {
    if (displayMin === 0 && displayMax === 130) {
      const params = new URLSearchParams(searchParams);
      params.delete("minPrice");
      params.delete("maxPrice");
      const newPath = params.toString()
        ? `${pathName}?${params.toString()}`
        : pathName;
      router.replace(newPath, { scroll: false });
    } else {
      const params = new URLSearchParams(searchParams);
      params.set("minPrice", displayMin.toString());
      params.set("maxPrice", displayMax.toString());
      router.replace(`${pathName}?${params.toString()}`, { scroll: false });
    }
  }, [displayMin, displayMax, pathName, router, searchParams]);

  const handleChange = useCallback(
    (event: Event, newValue: number | number[]) => {
      const newValueArray = newValue as number[];
      setValue(newValueArray);
      if (onValueChange) {
        onValueChange(newValueArray);
      }
    },
    [onValueChange]
  );

  const handleChangeCommitted = useCallback(
    (event: React.SyntheticEvent | Event, newValue: number | number[]) => {
      if (Array.isArray(newValue)) {
        const [newMinPrice, newMaxPrice] = newValue;
        setDisplayMin(newMinPrice);
        setDisplayMax(newMaxPrice);
      }
    },
    []
  );

  return (
    <Box sx={{ width: 220 }}>
      <WhiteSlider
        getAriaLabel={() => "Price range"}
        value={value}
        onChange={handleChange}
        onChangeCommitted={handleChangeCommitted}
        valueLabelDisplay="auto"
        getAriaValueText={valuetext}
        min={0}
        max={130}
      />
      <div className="flex justify-between">
        <span>${displayMin}</span>
        <span>${displayMax}</span>
      </div>
    </Box>
  );
}

const MemoizedRangeSlider = memo(RangeSlider);
MemoizedRangeSlider.displayName = "RangeSlider";

export default MemoizedRangeSlider;

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: app/layout.tsx
================
import Footer from "@/app/components/Footer/Footer";
import Advertisement from "@/app/components/Header/Advertisement";
import Header from "@/app/components/Header/Header";
import Info from "@/app/components/Header/Info";
import NavigationSection from "@/app/components/Header/NavigationSection";
import { type ChildrenProps } from "@/app/components/InterfaceType";
import "@/app/globals.css";
import PremiumHeader from "./components/Header/PremiumHeader";

export default function RootLayout({ children }: ChildrenProps) {
  return (
    <html lang="en">
      <body className="bg-black text-white  text-base">
        {/* make components server components by passing as props */}
        <Header
          advertisement={<Advertisement />}
          premiumArea={<PremiumHeader />}
        >
          <Info />
          <NavigationSection />
        </Header>
        {children}
        <Footer />
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import Category from "@/app/components/Homepage/Category";
import LearnMore from "@/app/components/Homepage/LearnMore";
import TopSellerContainer from "@/app/components/Homepage/TopSellerContainer";
import ClubJoin from "@/app/components/Homepage/ClubJoin";
import ProductReview from "@/app/components/Homepage/ProductReview";
import Brands from "./components/Homepage/Brands";
function Page() {
  return (
    <div>
      <Category />
      <LearnMore />
      <TopSellerContainer />
      <ClubJoin />
      <ProductReview />
      <Brands />
    </div>
  );
}

export default Page;

================
File: app/premium/page.tsx
================
import Form from "@/app/components/PremiumPage/Form";

function page() {
  return (
    <section className="px-12 pt-24 grid-cols-2 grid">
      <div>
        <h1 className="text-4xl leading-normal">
          Sign up today and get
          <br />
          exclusive club member
          <br />
          benefits
        </h1>
        <h2 className="text-xl mt-5 leading-normal">
          Our premium membership will give you <br />
          exclusive access to our early-bird sales,
          <br /> new arrivals and other special offers.{" "}
        </h2>
      </div>
      <Form />
    </section>
  );
}

export default page;

================
File: app/reviews/page.tsx
================
import ReviewSection from "../components/ReviewPage/ReviewSection";

function page() {
  return (
    <div className="mx-12 mt-20">
      <section>
        <h1 className="text-6xl">Recommended Products</h1>
        <h2 className="mt-4 text-2xl">Let the community help you shop</h2>
      </section>
      <section>
        <ReviewSection />
      </section>
    </div>
  );
}

export default page;

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
import withPlaiceholder from "@plaiceholder/next";
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "static.wixstatic.com",
        port: "",
        pathname: "/**",
      },
    ],
  },
};

export default withPlaiceholder(nextConfig);

================
File: package.json
================
{
  "name": "e-commerce-store",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@mui/material": "^6.1.1",
    "@next/third-parties": "^14.2.13",
    "@plaiceholder/next": "^3.0.0",
    "axios": "^1.7.7",
    "lucide-react": "^0.445.0",
    "mongodb": "^6.9.0",
    "mongoose": "^8.6.3",
    "next": "^14.2.13",
    "next-csrf": "^0.2.1",
    "plaiceholder": "^3.0.0",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.53.0",
    "react-range": "^1.10.0",
    "react-scroll-to-top": "^3.0.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@types/mongoose": "^5.11.96",
    "@types/node": "^22.7.4",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": false,
    "checkJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "app/api/getBlurData"
  ],
  "exclude": ["node_modules"]
}
